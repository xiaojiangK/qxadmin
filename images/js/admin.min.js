/*!
 * qx-admin.js v1.0.0
 * (c) 2019 Qinxin-XiaojiangK
 * Released under the QiuXin License.
 */

// globalFn
const t = {
    // 模糊查询
    fuzzyQuery: function (list, key) {
        var reg = new RegExp(key);
        var arr = [];
        for (var i = 0; i < list.length; i++) {
            if (reg.test(list[i])) {
                arr.push(list[i]);
            }
        }
        return arr.length > 0 ? true : false;
    },
    // 是否滚动条
    ifShowScroll: function (that) {
        var bar = $(that).find('.qx-scrollbar_bar');
        var wrap = $(that).find('.qx-scrollbar_wrap');
        var selectH = $(that).find('.qx-select_list').height();
        var scrollH = $(that).find('.qx-scrollbar').height();
        var scale = scrollH / selectH;
        if (selectH > scrollH) {
            $(bar).css({
                'top': 0,
                'display': 'block',
                'height': scale * scrollH
            });
            $(wrap).scrollTop(0);
        } else {
            $(bar).css('display', 'none');
        }
        // 判断滚动限制
        var barH = $(bar).height();
        $(wrap).scroll(function (){
            var top = $(this).scrollTop();
            if (top > scrollH - barH) {
                top = scrollH - barH;
            }
            $(this).siblings('.qx-scrollbar_bar').css('top', top);
        });
    },
    // hasClass
    hasClass: function (that, i) {
        return $(that).hasClass(i);
    },
    getStorage(key) {
        return localStorage.getItem(key) ? JSON.parse(localStorage.getItem(key)) : [];
    },
    setStorage(key, val) {
        localStorage.setItem(key, val);
    }
};

// globalData
const g = {
    radioed: '',
    checked: [],
    selectd: [],
    itemLen: 0,
    paneLen: 0,
    icon: "info,infos,success,successs,hook,error,hollow-close,warning,warnings,fileopen,retract,see,sees,max,refresh,ref-left,ref-right,arrowright,arrowleft,arrowdown,arrowup,left-round,right-round,magnifier,uploadpic,others,notice,adjust,data,form,navigation,share,shares,loading,spinner,uploads,upload,forks,close,closes,seekicon,searchs,payconfig,coin,export,daochu,weChat,alipay,icondown,iconup,users,user,resets,reset,edits,edit,password,passwd,remove,delete,adds,add,menu,menuopen,finance,wallet,custom,customs,fork,fork-spoon,square-full,goblet-full,cream-square,goblet,cup,hot-water,cream-round,potato-strips,cold-drink,cloudy-sunny,aid-kit,off-microphone,chat-round,chatline-round,chatdot-round,chatdot-square,takeaway-box,docs,cilun,eb,thunder,switchbtn,coffee,home-normal,home,cream,tickets,web,headset,chilun,hollowbuy,buy,cooperate,plus,aircraft,fullmore,more,help,outlinehelp,female,male,play,platform,outlinereduce,qrcode,picture,mingfood,message,refrigerator,alarmclock,alarmclocks,mouse,goods,dish,doc,bicycle,scan,printing,tools,toolss,toolsbox,toolsboxs,clip,place,places,cloudy,messages,mobile,mobiles,link,trophy,sunny,shangji,truck,trophystar,clasphands,lollipop,watch,watchs,plane,pause,pictures,camera,scissors,doubleright,doubleleft,minus,cameras,phone,phonecall,goodss,car,stars,star,videos,video,voice,check,umbrella",
    selectedNav: t.getStorage('tagList')
};

// Base 类
class Base {
    constructor() {}
    ajax(opt) {
        var options = {
            url: '',
            obj: '',
            html: '',
            link: '',
            data: {},
            jsonp: '',
            async: true,
            type: 'get',
            refresh: false,
            dataType: '',
            error: function() {},
            success: function() {},
            complete: function() {},
            beforeSend: function() {},
            contentType: 'application/x-www-form-urlencoded'
        };
        var opts = $.extend(options, opt);
        $.ajax({
            url: opts.url,
            data: opts.data,
            jsonp: opts.jsonp,
            async: opts.async,
            type: opts.type,
            dataType: opts.dataType,
            contentType: opts.contentType,
            success (res){
                opts.success && opts.success(res);
                if (opts.successMsg) {
                    $(this).message({
                        type: 'success',
                        msg: opts.successMsg
                    });
                }
                if (opts.refresh) {
                    window.location.reload();
                }
                if (opts.link) {
                    window.location.href = opts.link;
                }
                if (opts.obj && opts.html) {
                    $(opts.obj).html(opts.html);
                }
            },
            error (res){
                opts.error && opts.error(res);
                if (opts.errorMsg) {
                    $(this).message({
                        type: 'error',
                        msg: opts.errorMsg
                    });
                }
                if (opts.refresh) {
                    window.location.reload();
                }
            },
            complete (res){
                opts.complete && opts.complete(res);
                if (opts.refresh) {
                    window.location.reload();
                }
            },
            beforeSend (res){
                opts.beforeSend && opts.beforeSend(res);
            }
        });
    }
    success(opt) {
        var options = {
            ele: {},
            code: 0,
            msg: '',
            link: '',
            refresh: false,
            remove: false,
            type: 'success',
            closeLayer: false
        };
        var opts = $.extend(options, opt);
        if (opts.code) {
            if (opts.code == 100000) {
                if (opts.remove) {
                    $(opts.ele).remove();
                }
                if (opts.link) {
                    window.location.href = opts.link;
                }
                if (opts.refresh) {
                    window.location.reload();
                }
                if (opts.msg) {
                    $(this).message({
                        type: opt.type,
                        msg: opts.msg
                    });
                }
                if (opts.closeLayer) {
                    $(this).closeLayer();
                }
            } else if (opts.code == 100002) {
                if (opts.link) {
                    window.location.href = '/login';
                }
                if (opts.msg) {
                    $(this).message({
                        type: opt.type,
                        msg: opts.msg
                    });
                }
            } else {
                if (opts.msg) {
                    $(this).message({
                        type: opt.type,
                        msg: opts.msg
                    });
                }
            }
        }
    }
    comfirm(opt) {
        var options = {
            msg: '',
            obj: '',
            html: '',
            link: '',
            type: 'warning',
            refresh: false,
            showCancel: true
        };
        var opts = $.extend(options, opt);
        if (opts.msg) {
            $(this).messageBox({
                type: opts.type,
                message: opts.msg,
                showCancelBtn: opts.showCancel,
                confirm: function (){
                    opts.success && opts.success();
                    if (opts.refresh) {
                        window.location.reload();
                    }
                    if (opts.link) {
                        window.location.href = opts.link;
                    }
                    if (opts.obj && opts.html) {
                        $(opts.obj).html(opts.html);
                    }
                }
            });
        }
    }
    tips(opt) {
        var options = {
            msg: '',
            type: 'success',
            obj: '',
            html: ''
        };
        var opts = $.extend(options, opt);
        if (opts.msg) {
            $(this).message({
                type: opts.type,
                msg: opts.msg
            });
            if (opts.obj && opts.html) {
                $(opts.obj).html(opts.html);
            }
        }
    }
    render(opt) {
        var options = {
            msg: '',
            type: 'success',
            obj: '',
            html: ''
        };
        var opts = $.extend(options, opt);
        if (opts.msg) {
            $(this).message({
                type: opts.type,
                msg: opts.msg
            });
        }
        if (opts.obj && opts.html) {
            $(opts.obj).html(opts.html);
        }
    }
}

;(function($){
    // radio
    $.fn.radio = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-radio', function (){
            var radio = $(this).find('.qx-radio_input');
            if (t.hasClass(radio, 'is-disabled')) return;
            var input = $(this).find('input');
            $('.qx-radio input').removeAttr('checked');
            $(this).siblings().find('.qx-radio_input').removeClass('is-checked');
            $(this).attr('aria-checked', true).siblings().removeAttr('aria-checked');
            $(input).attr('checked', true);
            $(radio).addClass('is-checked');
            g.radioed = $(input).val();
            opts.change && opts.change($(input).val());
            return false;
        });
    }
    // checkbox
    $.fn.checkbox = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-checkbox', function (){
            var checkbox = $(this).find('.qx-checkbox_input');
            if (t.hasClass(checkbox, 'is-disabled')) return;
            var groupIdx = $(this).parent().attr('group-idx');
            var checkIdx = $(checkbox).attr('data-idx');
            var input = $(this).find('input');
            var gIdx = groupIdx ? groupIdx : 0;
            if (t.hasClass(checkbox, 'is-checked')) {
                $(input).removeAttr('checked');
                $(this).removeAttr('aria-checked');
                $(checkbox).removeClass('is-checked');
                g.checked[gIdx] = g.checked[gIdx].filter(item => item.id != checkIdx);
            } else {
                $(input).attr('checked', true);
                $(this).attr('aria-checked', true);
                $(checkbox).addClass('is-checked');
                g.checked[gIdx].push({
                    id: checkIdx,
                    value: $(input).val()
                });
            }
            opts.change && opts.change(g.checked[gIdx]);
            return false;
        });
    }
    // select
    $.fn.select = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-select', function (e){
            var that = this;
            var e = e || window.event;
            if (t.hasClass(this, 'is-disabled')) return;
            // 非多选隐藏
            if (!t.hasClass(this, 'is-multiple')) {
                $('.qx-select-dropdown').slideUp('fast');
            }
            // 恢复默认
            $(this).find('.qx-select_item').show();
            var arrow = $('.qx-select .icon-arrowdown');
            $(arrow).css('transform', 'rotate(0)');
            var input = $(this).find('.qx-input_inner');
            var dropdown = $(this).find('.qx-select-dropdown');
            // 搜索
            if (t.hasClass(this, 'is-filter')) {
                $(input).on('input', function (){
                    var result = [];
                    var keyword = $(this).val();
                    var empty = $(that).find('.qx-select_empty');
                    var selectItem = $(that).find('.qx-select_item');
                    if (keyword == '') {
                        $(selectItem).show();
                        $(empty).hide().text('');
                        t.ifShowScroll(that);
                        return;
                    }
                    $(selectItem).each(function (){
                        var text = $(this).text();
                        if (t.fuzzyQuery(text.split(''), keyword) || text == keyword) {
                            $(this).show();
                            result.push(text);
                        } else {
                            $(this).hide();
                        }
                    });
                    if (result.length == 0) {
                        t.ifShowScroll(that);
                        $(empty).show().text('无匹配数据');
                    } else {
                        t.ifShowScroll(that);
                        $(empty).hide().text('');
                    }
                    return;
                });
            }
            if ($(dropdown).css('display') == 'none') {
                $(dropdown).slideDown('fast');
                var iconarrow = $(this).find('.icon-arrowdown');
                $(iconarrow).css('transform', 'rotate(180deg)');
                t.ifShowScroll(this);
                $(document).on('click', function (){
                    $(dropdown).slideUp('fast');
                    $(iconarrow).css('transform', 'rotate(0)');
                });
            } else {
                if (e.target.nodeName != 'LI') {
                    $(dropdown).slideUp('fast');
                }
                $(arrow).css('transform', 'rotate(0)');
            }
            $(this).find('.qx-select_item').each(function (){
                $(this).off().on('click', function (){
                    var key = $(this).parents('.qx-select').find('input[type=text]').attr('name')
                    // 多选
                    if (t.hasClass(that, 'is-multiple')) {
                        var value = $(this).attr('data-val');
                        if (t.hasClass(this, 'active')) {
                            $(this).removeClass('active');
                            g.selectd = g.selectd.filter(item => item.value != value);
                        } else {
                            $(this).addClass('active');
                            g.selectd.push({
                                value, label: $(this).text()
                            });
                        }
                        var label = '';
                        var val = '';
                        g.selectd.map((item, index) => {
                            if (index == g.selectd.length - 1) {
                                val += item.value;
                                label += item.label;
                            } else {
                                val += `${item.value} / `;
                                label += `${item.label} / `;
                            }
                        });
                        $(input).val(label).attr('data-value', val);
                        opts.change && opts.change({
                            key,
                            data: g.selectd
                        });
                        return;
                    }
                    if ($(this).parents('.icon').length) {
                        var label = 'icon';
                        $(input).siblings('.iconfont').remove();
                        var value = $(this).find('i').attr('class');
                        $(input).parent().append(`<i class="${value}"></i>`);
                        $(input).val(' ').attr('data-value', value);
                    } else {
                        var value = $(this).attr('data-val');
                        var label = $(this).text();
                        $(input).val(label).attr('data-value', value);
                    }
                    $(this).addClass('active').siblings().removeClass('active');
                    opts.change && opts.change({
                        key,
                        data: {
                            value,
                            label
                        }
                    });
                });
            });
            return false;
        });
    }
    // switch
    $.fn.switch = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-switch', function (){
            if (t.hasClass(this, 'is-disabled')) return;
            var value = '';
            var input = $(this).find('input');
            var trueVal = $(input).attr('true-value');
            var falseVal = $(input).attr('false-value');
            if (t.hasClass(this, 'is-checked')) {
                value = falseVal ? falseVal : false;
                $(input).removeAttr('checked');
                $(this).removeClass('is-checked');
                $(this).find('.qx-switch_label').removeClass('is-active').eq(0).addClass('is-active');
            } else {
                value = trueVal ? trueVal : true;
                $(this).addClass('is-checked');
                $(input).attr('checked', true);
                $(this).find('.qx-switch_label').removeClass('is-active').eq(1).addClass('is-active');
            }
            opts.change && opts.change(value);
            return false;
        });
    }
    // input
    $.fn.input = function (option){
        var config = {
            change: null,
            blur: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.icon-closes', function (){
            $(this).parents('.qx-input_box').find('input').val('');
            return false;
        });
        $(this).on('click', '.icon-see', function (){
            var input = $(this).parents('.qx-input_box').find('input');
            if ($(input).attr('type') == 'text') {
                $(this).removeClass('icon-sees')
                $(input).attr('type', 'password');
            } else {
                $(this).addClass('icon-sees')
                $(input).attr('type', 'text');
            }
            return false;
        });
        $(this).on('input', '.qx-input_inner', function (){
            var parent = $(this).parents('.qx-input_box');
            if (t.hasClass(parent, 'showWord')) {
                $(parent).find('.num').text($(this).val().length);
            }
            opts.change && opts.change($(this).val());
            return false;
        });
        if (opts.blur) {
            $(this).on('blur', '.qx-input_inner', function (){
                opts.blur($(this).val());
            });
            $(this).on('blur', '.qx-area_inner', function (){
                opts.blur($(this).val());
            });
        }
        $(this).on('input', '.qx-area_inner', function (){
            var parent = $(this).parents('.qx-textarea');
            if (t.hasClass(parent, 'showWord')) {
                $(parent).find('.num').text($(this).val().length);
            }
            opts.change && opts.change($(this).val());
            return false;
        });
    }
    // DatePicker
    $.fn.DatePicker = function (option){
        var config = {
            min: false,
            max: false,
            format: 'YYYY-MM-DD HH:mm:ss',
            isRange: false,
            between: false,
            hasShortcut: false,
            shortcutOptions: [],
            hide: null
        };
        var val = [];
        var opts = $.extend(config, option);
        var input = $(this).find('input');
        $(this).find('.qx-datepicker-editor').datePicker({
            min: opts.min,
            max: opts.max,
            format: opts.format,
            isRange: opts.isRange,
            between: opts.between,
            hasShortcut: opts.hasShortcut,
            shortcutOptions: opts.shortcutOptions,
            hide: function (e){
                val = [];
                if (input.length == 1) {
                    val = $(input).val();
                } else {
                    for (let i of input) {
                        val.push($(i).val());
                    }
                }
                opts.hide && opts.hide(val, e);
            }
        });
    }
    // Page
    var zp = {
        init: function(obj, pageinit) {
            return (function() {
                obj.off();
                zp.addhtml(obj, pageinit);
                zp.bindEvent(obj, pageinit);
            } ());
        },
        addhtml: function(obj, pageinit) {
            if (pageinit.current > pageinit.pageNum) {
                pageinit.current = pageinit.pageNum;
            }
            return (function() {
                obj.empty();
                if (pageinit.current > 1) {
                    obj.append('<a href="javascript:;" class="prebtn">上一页</a>');
                } else {
                    obj.remove('.prevPage');
                    obj.append('<span class="disabled">上一页</span>');
                }
                if (pageinit.current > 4 && pageinit.pageNum > 4) {
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 1 + '</a>');
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 2 + '</a>');
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current > 4 && pageinit.current <= pageinit.pageNum - 5) {
                    var start = pageinit.current - 2,
                    end = pageinit.current + 2;
                } else if (pageinit.current > 4 && pageinit.current > pageinit.pageNum - 5) {
                    var start = pageinit.pageNum - 4,
                    end = pageinit.pageNum;
                } else {
                    var start = 1,
                    end = 9;
                }
                for (; start <= end; start++) {
                    if (start <= pageinit.pageNum && start >= 1) {
                        if (start == pageinit.current) {
                            obj.append('<span class="current">' + start + '</span>');
                        } else if (start == pageinit.current + 1) {
                            obj.append('<a href="javascript:;" class="zxfPagenum nextpage">' + start + '</a>');
                        } else {
                            obj.append('<a href="javascript:;" class="zxfPagenum">' + start + '</a>');
                        }
                    }
                }
                if (end < pageinit.pageNum) {
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current >= pageinit.pageNum) {
                    obj.remove('.nextbtn');
                    obj.append('<span class="disabled">下一页</span>');
                } else {
                    obj.append('<a href="javascript:;" class="nextbtn">下一页</a>');
                }
                obj.append('<span>' + '共' + '<b>' + pageinit.pageNum + '</b>' + '页，' + '</span>');
                obj.append('<span>' + '到第' + '<input type="number" class="zxfinput" value="'+ pageinit.current +'"/>' + '页' + '</span>');
            } ());
        },
        bindEvent: function(obj, pageinit) {
            return (function() {
                obj.on("click", "a.prebtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur - 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.zxfPagenum",
                function() {
                    var cur = Number.parseInt($(this).text());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.nextbtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur + 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on('blur', 'input.zxfinput', function (){
                    var cur = Number.parseInt($(this).val());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
            } ());
        }
    }
    $.fn.createPage = function(option) {
        var pageinit = $.extend({
            pageNum: 10,
            current: 1,
            backfun: function() {}
        }, option);
        zp.init($(this).find('.pagination'), pageinit);
    }

    // tabs
    $.fn.tabs = function (option){
        var config = {
            click: null,
            remove: null,
            addItem: null
        };
        var opts = $.extend(config, option);
        $(this).off().on('click', '.qx-tabs_item', function (){
            var index = $(this).attr('data-idx');
            var pane = $(this).parents('.qx-tabs').find('.qx-tab-pane');
            $(this).addClass('active').siblings().removeClass('active');
            $(pane).each(function (){
                if ($(this).attr('data-idx') == index) {
                    var iframe = $(this).find('iframe');
                    if (!$(iframe).attr('src')) {
                        $(iframe).attr('src', $(iframe).attr('data-src'));
                    }
                    $(this).addClass('active').siblings().removeClass('active');
                }
            });
            opts.click && opts.click($(this).text());
        });
        $(this).on('click', '.icon-forks', function (){
            var pane = $(this).parents('.qx-tabs').find('.qx-tab-pane');
            if (pane.length == 1) return;
            if ($(this).parents('.nav')) {
                // remove
                var curItem = $(this).parent().text().trim();
                for (let i = 0; i < g.selectedNav.length; i++) {
                    if (curItem == g.selectedNav[i].title) {
                        g.selectedNav.splice(i, 1);
                    }
                }
                t.setStorage('tagList', JSON.stringify(g.selectedNav));
            }
            var item = $(this).parent('.qx-tabs_item');
            var index = $(item).attr('data-idx');
            if (t.hasClass(item, 'active')) {
                var next = $(item).next('.qx-tabs_item');
                var prev = $(item).prev('.qx-tabs_item');
                if (next.length) {
                    next.addClass('active');
                    $(pane).each(function (){
                        if ($(this).attr('data-idx') == index) {
                            $(this).next().addClass('active');
                            var iframe = $(this).next().find('iframe');
                            $(iframe).attr('src', $(iframe).attr('data-src'));
                        }
                    });
                } else {
                    prev.addClass('active');
                    $(pane).each(function (){
                        if ($(this).attr('data-idx') == index) {
                            $(this).prev().addClass('active');
                            var iframe = $(this).prev().find('iframe');
                            $(iframe).attr('src', $(iframe).attr('data-src'));
                        }
                    });
                }
            }
            $(item).remove();
            $(pane).each(function (){
                if ($(this).attr('data-idx') == index) {
                    $(this).remove();
                }
            });
            opts.remove && opts.remove($(item).text());
        });
        // addTab
        if (opts.addItem) {
            var pack = opts.addItem.pack ? opts.addItem.pack : 'body';
            var title = opts.addItem.title ? opts.addItem.title : 'New Tabs';
            var content = opts.addItem.content ? opts.addItem.content : 'New Tabs Content';
            var isClose = t.hasClass($(pack).find('.qx-tabs'), 'closable');
            $(pack).find('.qx-tabs_item,.qx-tab-pane').removeClass('active');
            $(pack).find('.qx-tabs_nav').append(`<div class="qx-tabs_item active" data-idx="${g.itemLen++}">${title} ${isClose ? `<span class="iconfont icon-forks"></span>` : ''}</div>`);
            $(pack).find('.qx-tabs_con').append(`<div class="qx-tab-pane active" data-idx="${g.paneLen++}">${content}</div>`);
        }
    }

    // message
    $.fn.message = function (option){
        var config = {
            msg: '这是一条消息提醒',
            type: 'info',
            duration: 2000,
            showClose: false
        };
        var opts = $.extend(config, option);
        $('.qx-message').remove();
        $('body').append(`
            <div role="alert" class="qx-message qx-message-${opts.type} ${opts.showClose ? 'is-closable' : ''}">
                <i class="iconfont icon-${opts.type}"></i>
                <p class="qx-message_con">${opts.msg}</p>
                ${opts.showClose ? `<i class="iconfont icon-forks"></i>` : ''}
            </div>
        `);
        $('.qx-message').each(function (){
            $(this).find('.icon-forks').on('click', function (){
                $(this).parent('.qx-message').css({
                    opacity: 0,transform: 'translate3d(-50%,-100%,0)'
                });
            });
            $(this).delay(opts.duration).animate({
                top: '-100%',opacity: 0
            }, 'slow', function (){
                $(this).remove();
            });
        });
    }

    // checkForm
    $.fn.validate = function (option){
        var config = {};
        var flag = true;
        var data = {};
        var opts = $.extend(config, option);
        $(this).find('.qx-form-item').each(function (){
            var that = this;
            var prop = $(this).attr('prop');
            var qxInput = $(this).find('.qx-input');
            var content = $(this).find('.qx-form_con');
            var date = $(this).find('.qx-datepicker-editor');
            for (let i in opts) {
                if (i == prop) {
                    var r = opts[i];
                    function checkInput(v, type='') {
                        $(that).find('.qx-form_error').remove();
                        if ((r.required&&!v) || v.length < r.min || v.length > r.max || (r.pattern && !r.pattern.test(v))) {
                            $(qxInput).addClass('error');
                            $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                            flag = false;
                        } else {
                            $(qxInput).removeClass('error');
                        }
                        return false;
                    }
                    function checkBox(t) {
                        var idx = $(t).parent().attr('group-idx') || 0;
                        setTimeout(() => {
                            var len = g.checked[idx].length;
                            $(that).find('.qx-form_error').remove();
                            if ((r.required&&len == 0) || len > r.max || len < r.min) {
                                $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                                flag = false;
                            }
                        }, 0);
                        return false;
                    }
                    function checkRadio() {
                        $(that).find('.qx-form_error').remove();
                        setTimeout(() => {
                            if (r.required && !g.radioed) {
                                $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                                flag = false;
                            }
                        }, 0);
                        return false;
                    }

                    // Submit Form
                    if (opts.type && opts.type == 'submit') {
                        $(this).find('.qx-input input').each(function (){
                            var name = $(this).attr('name');
                            var value = $(this).attr('data-value')
                            if (value) {
                                data[name] = value;
                            } else {
                                data[name] = $(this).val();
                            }
                            checkInput($(this).val(), 'submit');
                        });
                        $(this).find('textarea').each(function (){
                            var name = $(this).attr('name');
                            data[name] = $(this).val();
                            checkInput($(this).val(), 'submit');
                        });
                        $(this).find('.qx-checkbox').each(function (index){
                            checkBox(this);
                            if ($(this).attr('aria-checked')) {
                                var input = $(this).find('input');
                                var name = $(input).attr('name');
                                data[name] = data[name] ? data[name] : '';
                                data[name] += $(input).val()+',';
                            }
                        });
                        $(this).find('.qx-radio').each(function (){
                            checkRadio();
                            var input = $(this).find('input');
                            var name = $(input).attr('name');
                            data[name] = $(input).val();
                        });
                    }
                    // Reset Form
                    if (opts.type && opts.type == 'reset') {
                        $(date).removeClass('error');
                        $(qxInput).removeClass('error');
                        $(that).find('.qx-form_error').remove();
                    }

                    $(this).on('click', '.cascader-menus li', function (){
                        if ($(this).find('.icon-check')) {
                            $(that).find('.cascader+.qx-form_error').remove();
                            $(that).find('.qx-cascader .error').removeClass('error');
                        }
                    });

                    $(this).find('input, textarea').on('input', function (){
                        checkInput($(this).val());
                    });

                    $(this).find('.qx-checkbox').each(function (){
                        $(this).on('click', function (){
                            checkBox(this);
                        });
                    });

                    $(this).find('.qx-radio').each(function (){
                        $(this).on('click', function (){
                            checkRadio();
                        });
                    });

                    $(this).find('.qx-select input').on('blur',function (){
                        setTimeout(() => {
                            checkInput($(this).val());
                        }, 120);
                    });

                    $(this).find('.c-datepicker-data-input').on('blur',function (){
                        setTimeout(() => {
                            checkInput($(this).val());
                        }, 120);
                    });
                }
            };
        });
        setTimeout(() => {
            opts.valid && opts.valid({
                data,
                valid: flag
            });
        }, 0)
    }

    // getFormData
    $.fn.getForm = function (option){
        var config = {};
        var data = {};
        var opts = $.extend(config, option);
        setTimeout(() => {
            for (let i of $(this).find('input')) {
                var name = $(i).attr('name');
                if ($(i).attr('type') == 'checkbox') {
                    if ($(i).parent().hasClass('qx-switch')) {
                        data[name] = $(i).attr('checked') ? true : false;
                    } else {
                        if ($(i).attr('checked')) {
                            data[name] = data[name] ? data[name] : '';
                            data[name] += $(i).val()+',';
                        }
                    }
                } else if ($(i).attr('type') == 'radio') {
                    if ($(i).attr('checked')) {
                        data[name] = $(i).val();
                    }
                }else {
                    var value = $(i).attr('data-value');
                    if (value) {
                        data[name] = value;
                    } else {
                        data[name] = $(i).val();
                    }
                }
            }
            for (let i of $(this).find('textarea')) {
                var name = $(i).attr('name');
                data[name] = $(i).val();
            }
            opts.success && opts.success(data);
        });
    };

    // upload
    $.fn.upload = function (option){
        var config = {
            maxLength: 9
        };
        var files = $(this)[0].files;
        var opts = $.extend(config, option);
        if (opts.el) {
            // 限制数量
            var uplaod = $(opts.el).find('.icon-uploadpic');
            if (opts.type == 'avatar') {
                if (files.length == 1) {
                    $(uplaod).fadeOut();
                } else {
                    $(this).message({
                        type: 'error',
                        msg: '对不起，头像只能上传一张',
                    });
                    return;
                }
            }
            if (opts.type == 'photo') {
                if (files.length > opts.maxLength) {
                    $(this).message({
                        type: 'error',
                        msg: `对不起，照片墙最多上传${opts.maxLength}张`,
                    });
                    return;
                } else if (files.length == opts.maxLength) {
                    $(uplaod).fadeOut();
                }
            }
            // 删除
            $(opts.el).on('click', '.icon-remove', function (){
                $(uplaod).fadeIn();
                $(this).parents('.cover').animate({
                    'opacity': 0,'margin-top': '-30px'
                }, 'slow', function (){
                    $(this).remove()
                });
            });
        }
        $.each(files,function(k,i){
            if (!/image\/\w+/.test(i.type)) {
                $(this).message({
                    type: 'error',
                    msg: '对不起，只能上传图片类型文件',
                });
                return false;
            }
            var formData = new FormData();
            formData.append("file", i);
            var reader = new FileReader();
            reader.readAsDataURL(i);
            reader.onload = function() {
                var imgSrc = this.result;
                if (opts.el) {
                    var imgs = document.createElement("img");
                    $(imgs).attr("src", imgSrc);
                    $(imgs).css("animation", 'fadeIn .8s');
                    $(opts.el).prepend(imgs);
                    $(opts.el).find('.mask').remove();
                    $(imgs).wrapAll('<div class="cover"></div>');
                    $(opts.el).find('.cover').append(`<div class="mask"><i class="iconfont icon-remove"></i></div>`);
                }
                opts.success && opts.success({
                    "file": i,
                    "base64": imgSrc,
                    "formData": formData
                });
            };
        });
        // 判断数量
        if (opts.el) {
            var aImgLen = $(opts.el).find('img').length;
            if (aImgLen == opts.maxLength - 1) {
                $(uplaod).fadeOut();
                return;
            }
        }
    }

    // tooltip
    $.fn.tooltip = function (option){
        var config = {
            msg: '这是一条工具提示',
            duration: 2000,
            align: 'center'
        };
        var opts = $.extend(config, option);
        $('.qx-tooltip').remove();
        $('body').append(`<div role="tooltip" class="${opts.align ? opts.align : ''} qx-tooltip">${opts.msg}</div>`);
        $('.qx-tooltip').each(function (){
            $(this).delay(opts.duration).animate({ opacity: 0 }, function (){
                $(this).remove();
            });
        });
    }

    // messageBox
    $.fn.messageBox = function (option){
        var config = {
            title: '提示',
            showInput: false,
            message: '这是一段内容',
            showCancelBtn: false,
            showConfirmBtn: true,
            cancelBtnText: '取消',
            confirmBtnText: '确定'
        };
        var opts = $.extend(config, option);
        $('.qx-msgbox').remove();
        $('body').append(`
            <div role="dialog" aria-label="${opts.title}" class="qx-msgbox">
                <div class="qx-box">
                    <div class="qx-msg_header">
                        <div class="qx-msg_title">
                            <span>${opts.title}</span>
                        </div>
                        <i class="iconfont icon-forks"></i>
                    </div>
                    <div class="qx-msg_content">
                        ${opts.type && !opts.showInput ? `<i class="iconfont icon-${opts.type}"></i>` : ''}
                        <div class="qx-msg_main">${opts.message}</div>
                        ${opts.showInput ? `
                            <div class="qx-msg_input">
                                <div class="qx-input">
                                    <input type="${opts.type ? opts.type : 'text'}" autocomplete="off" ${opts.value ? `value=${opts.value}` : ''} ${opts.placeholder ? `placeholder=${opts.placeholder}` : ''} ${opts.maxLength ? `maxLength=${opts.maxLength}` : ''} ${opts.minLength ? `minLength=${opts.minLength}` : ''} class="qx-input_inner" />
                                </div>
                            </div>
                        ` : ''}
                    </div>
                    <div class="qx-msg_btns">
                        ${opts.showCancelBtn ? `<button type="button" class="mini cancel qx-button"><span>${opts.cancelBtnText}</span></button>` : ''}
                        ${opts.showConfirmBtn ? `<button type="button" class="primary mini qx-button"><span>${opts.confirmBtnText}</span></button>` : ''}
                    </div>
                </div>
                <div class="mask"></div>
            </div>
        `);

        function close() {
            $('.qx-msgbox').animate({
                opacity: 0,"margin-top": '-50px'
            }, 'fast', function (){
                $(this).remove();
            });
        }
        $('.qx-msgbox .icon-forks, .qx-msgbox .mask').on('click', function (){
            close();
            opts.close && opts.close();
        });
        $('.qx-msgbox .primary').on('click', function (){
            close();
            opts.confirm && opts.confirm();
        });
        $('.qx-msgbox .cancel').on('click', function (){
            close();
            opts.cancel && opts.cancel();
        });

    }

    $.fn.layer = function (option){
        var config = {
            title: '提示',
            move: true,
            content: '',
            iframe: true,
            area: [95, 85]
        };
        var opts = $.extend(config, option);
        if (opts.area.length < 2) {
            $(this).message({
                type: 'error',
                msg: 'area 参数错误'
            });
            return;
        }
        for (let i of opts.area) {
            if (typeof i != 'number') {
                $(this).message({
                    type: 'error',
                    msg: 'area 参数错误'
                });
                return;
            }
        }
        var width = opts.area[0];
        var height = opts.area[1];
        var left = (100 - width) / 2;
        var top = (100 - height) / 2;
        if (width > 100) width = 100;
        if (height > 100) height = 100;
        $('.qx-layer').remove();
        $('body').append(`
            <div role="layer" class="qx-layer" style="width:${width}%; height:${height}%; left:${left}%; top:${top}%">
                <div class="qx-layer-title">${opts.title}
                    <span class="iconfont icon-max"></span>
                    <span class="iconfont icon-forks"></span>
                </div>
                <div class="qx-layer-content">
                    ${opts.iframe ? `<iframe scrolling="auto" allowtransparency="true" style="height: ${$(window).height() * (height / 100) - 42}px" frameborder="0" src="${opts.content}"></iframe>` : opts.content}
                </div>
            </div>
            <div class="mask"></div>
        `);
        $('.qx-layer .icon-forks, .qx-layer+.mask').on('click', function (){
            $('.qx-layer').siblings('.mask').remove();
            $('.qx-layer').animate({'opacity': 0}).css({'transform': 'scale(.2)', 'visibility': 'hidden'});
            opts.close && opts.close();
        });
        var flag = true;
        $('.qx-layer .icon-max').on('click', function (){
            $('.qx-layer').animate({
                'top': flag ? 0 : top+'%',
                'left': flag ? 0 : left+'%',
                'width': flag ? '100%' : width+'%',
                'height': flag ? '100%' : height+'%',
            }, 'fast');
            flag = !flag;
        });
        if (opts.iframe) {
            $(window).resize(function (){
                $('.qx-layer iframe').css("height", $(window).height() * (height / 100) - 42);
            });
        }
        // move
        if (opts.move) {
            $('.qx-layer .qx-layer-title').mousedown(function (e){
                var e = e || window.event;
                var offset = $(this).offset();
                var disY = e.pageY - offset.top;
                var disX = e.pageX - offset.left;
                var parents = $(this).parents('.qx-layer');
                $(document).mousemove(function (e){
                    var e = e || window.event;
                    var y = e.pageY - disY;
                    var x = e.pageX - disX;
                    if (x >= $(window).width() - $(parents).outerWidth(true) - 6) {
                        x = $(window).width() - $(parents).outerWidth(true);
                    } else if (x <= 6) {
                        x = 0;
                    }
                    if (y >= $(window).height() - $(parents).outerHeight(true) - 6) {
                        y = $(window).height() - $(parents).outerHeight(true);
                    } else if (y <= 6) {
                        y = 0;
                    }
                    $(parents).css({
                        top: y + 'px',
                        left: x + 'px'
                    });
                    return false;
                });
                $(document).on('mouseup mouseleave', function() {
                    $(document).off('mousemove mouseup');
                });
                return false;
            });
        }
    }

    // cascader
    $.fn.cascader = function (option){
        var config = {
            options: []
        };
        var opts = $.extend(config, option);
        var that = this;
        function createEle(data, fn) {
            //回调函数
            var fn = fn || function(){};
            var $ul = $("<ul class='menus'></ul>");
            //创建li
            for (var i=0;i<data.length;i++) {
                if (data[i].children) {
                    var $li = $("<li><span>"+ data[i].label +"</span> <i class='iconfont icon-arrowright'></i></li>");
                } else {
                    var $li = $("<li><span>"+ data[i].label +"</span></li>");
                }
                (function(i){
                    $li.click(function(){
                        $(this).addClass('active').siblings().removeClass('active');
                        //清除
                        $ul.nextAll().remove();
                        if (data[i].children && data[i].children.length) {
                            //创建子菜单
                            createEle(data[i].children,function(ul){
                                //把创建好的子菜单插入到上一个菜单的后面
                                $ul.after(ul);
                            });
                        }
                        if (!data[i].children) {
                            var val = '';
                            var icon = $(that).find('.icon-arrowdown');
                            var cascader = $(that).find('.cascader-menus');
                            var active = $(cascader).find('li.active');
                            $(cascader).find('.icon-check').remove();
                            var last = active.length - 1;
                            for (let i = 0; i < active.length; i++) {
                                let text = $(active).eq(i).text().trim();
                                if (i == last) {
                                    val += text;
                                } else {
                                    val += text+' / ';
                                }
                            }
                            $(that).find('input').val(val);
                            $(cascader).slideUp('fast');
                            $(icon).css('transform', 'rotate(0)');
                            $(active).eq(last).append('<i class="iconfont icon-check"></i>');
                            opts.change && opts.change(val);
                        }
                    })
                })(i)
                $ul.append($li);
            }
            fn($ul)
        }

        createEle(opts.options, function($ul){
            that.append("<div class='cascader-menus'><div class='cascader-panel'></div></div>")
            that.find('.cascader-panel').append($ul);
        });

        $('.qx-cascader').off().on('click', '.qx-select', function (){
            $('.cascader-menus').slideUp('fast');
            $('.qx-cascader i').css('transform', 'rotate(0)');
            var menus = $(this).parents().siblings('.cascader-menus');
            var icon = $(this).find('i');
            if ($(menus).css('display') == 'none') {
                $(icon).css('transform', 'rotate(180deg)');
                $(menus).slideDown().css('display', 'inline-block');
            } else {
                $(icon).css('transform', 'rotate(0)');
                $(menus).stop().slideUp('fast');
            }
        });
    }

    // table
    $.fn.table = function(options) {
        var defaults = {
            titles: [],
            data: [],
            border: '',
            evenRowClass: '',
            oddRowClass: '',
            curRowClass: 'qx-curRow',
            overflowHeight: "260px",
            checked: null,
            switch: null,
            event: null
        }
        var that = this;
        var opts = $.extend(defaults, options);
        var titles = opts.titles;
        var datas = opts.data;
        var init = function(dom) {
            var id = dom[0].id;
            $("#" + id).empty();
            var arrH = [];
            arrH.push("<div id='" + id + "-qxtable-head'>");
            arrH.push("<table class='qx-table'>");
            arrH.push("<thead id='" + id + "-thead'>");
            arrH.push("<tr>");
            $.each(titles,
            function(i, item) {
                var tdw = "";
                if (item.width) {
                    tdw = `width=${item.width}px`;
                }
                if (item.checkBox) {
                    arrH.push("<th " + tdw + "><span class='checkboxs'><input type='checkbox' name='AllChecks'/></span></th>");
                } else {
                    arrH.push("<th " + tdw + ">" + item.title + "</th>");
                }
            });
            arrH.push("</tr>");
            arrH.push("</thead>");
            arrH.push("</table>");
            arrH.push("</div>");
            dom.append(arrH.join(""));
            var arrB = [];
            arrB.push("<div id='" + id + "-qxtable-data'>");
            arrB.push(`<table class='qx-table ${opts.collapse ? 'collapse' : ''}'>`);
            arrB.push("<tbody id='" + id + "-tbody'>");
            $.each(datas,
            function(i, item) {
                arrB.push("<tr>");
                $.each(titles,
                function(j, item2) {
                    var tdw = "";
                    var id = item.id;
                    var pid = item.pid;// 父ID
                    var collapse = opts.collapse;// 折叠
                    var defaults = opts.defaultClose;// 默认
                    if (item2.width) {
                        tdw = `width=${item2.width}px`;
                    }
                    if (item2.checkBox) {
                        var checked = item.checked;
                        if (collapse && pid > 0) {
                            arrB.push(`<td ${pid ? `data-pid=${pid}` : ''} class="${defaults ? 'none' : ''}" ${tdw}><span class='${checked == '1' ? 'active ' : ''} checkboxs'><input type='checkbox' ${checked == '1' ? 'checked' : ''} name='Checks' value='${item[item2.keyName]}'/></span></td"">`);
                        } else {
                            arrB.push(`<td ${tdw}><span class='${checked == '1' ? 'active ' : ''} checkboxs'><input type='checkbox' ${checked == '1' ? 'checked' : ''} name='Checks' value='${item[item2.keyName]}'/></span></td"">`);
                        }
                    } else if (item2.switch) {
                        if (collapse && pid > 0) {
                            arrB.push(`<td ${pid ? `data-pid=${pid}` : ''} class="${defaults ? 'none' : ''}" ${tdw}>
                                <div role="switch" class="${item[item2.keyName] == '1' ? 'is-checked' : ''} qx-switch" data-type="${item2.keyName}">
                                    <input type="checkbox" name="" ${item[item2.keyName] == '1' ? 'checked' : ''} class="qx-form_input">
                                    <span class="qx-switch_core"></span>
                                </div>
                            </td>`);
                        } else {
                            arrB.push(`<td ${tdw}>
                                <div role="switch" class="${item[item2.keyName] == '1' ? 'is-checked' : ''} qx-switch" data-type="${item2.keyName}">
                                    <input type="checkbox" name="" ${item[item2.keyName] == '1' ? 'checked' : ''} class="qx-form_input">
                                    <span class="qx-switch_core"></span>
                                </div>
                            </td>`);
                        }
                    } else {
                        if (item[item2.keyName] instanceof Array) {
                            $.each(item[item2.keyName], function (i, item3){
                                for (let i in item3) {
                                    if (i == item2.keysName) {
                                        if (collapse && pid > 0) {
                                            arrB.push(`<td ${pid ? `data-pid=${pid}` : ''} class="${defaults ? 'none' : ''}" ${tdw}><span>${item3[i]}</span></td>`);
                                        } else {
                                            arrB.push(`<td ${tdw}><span>${item3[i]}</span></td>`);
                                        }
                                    }
                                }
                            });
                        } else {
                            if (collapse && pid == 0 && j == 1) {
                                arrB.push(`<td ${id ? `data-cid=${id}` : ''} ${tdw}>
                                    <i class="iconfont icon-icondown ${defaults ? '' : 'active'}"></i>
                                    ${item2.default ? item2.default : item[item2.keyName]}
                                </td>`);
                            } else {
                                if (collapse && pid > 0) {
                                    arrB.push(`<td ${pid ? `data-pid=${pid}` : ''} class="${defaults ? 'none' : ''}" ${tdw}>${item2.default ? item2.default : item[item2.keyName]}</td>`);
                                } else {
                                    arrB.push(`<td ${tdw}>${item2.default ? item2.default : item[item2.keyName]}</td>`);
                                }
                            }
                        }
                    }
                });
                arrB.push("</tr>");
            });
            arrB.push("</tbody>");
            arrB.push("</table>");
            arrB.push("</div>");
            dom.append(arrB.join(""));

            // 默认数据
            var data = [];
            var checks = $("#" + id + "-tbody>tr input[type='checkbox'][name='Checks']");
            $(checks).each(function(i, item) {
                var tr = $(this).parents('tr');
                if (item.checked) {
                    data.push({
                        tr: tr,
                        id: $(item).val(),
                        data: datas[$(tr).index()]
                    });
                }
            });
            opts.checked && opts.checked(data);

            if (opts.switch) {
                // 监听开关
                $(`#${id}`).on('click', '.qx-switch', function (){
                    setTimeout(() => {
                        var tr = $(this).parents('tr');
                        var status = t.hasClass(this, 'is-checked');
                        // 修改
                        datas[$(this).parents('tr').index()].status = status;
                        // 返回值
                        opts.switch({
                            tr: tr,
                            data: datas[$(tr).index()],
                            id: datas[$(tr).index()].id,
                            type: $(this).attr('data-type'),
                            elem: this,
                            status
                        });
                    });
                });
            }
            // 自定义事件
            if (opts.event) {
                $(`#${id}`).find('*[data-event]').map((i, item) => {
                    var tr = $(item).parents('tr');
                    $(item).on('click', function (){
                        opts.event({
                            tr: tr,
                            data: datas[$(tr).index()],
                            event: $(this).attr('data-event')
                        });
                    });
                });
            }
            // 折叠监听
            $(`#${id}`).on('click', 'td' ,function (){
                if($(this).attr('data-cid')) {
                    var pid = $(this).attr('data-cid');
                    var icon = $(this).find('.iconfont');
                    var hasClass = $(icon).hasClass('active');
                    if (hasClass) {
                        $(icon).removeClass('active');
                    } else {
                        $(icon).addClass('active');
                    }
                    for (let i of $(`#${id} td`)) {
                        if ($(i).attr('data-pid') == pid) {
                            if (hasClass) {
                                $(i).slideUp('fast');
                            } else {
                                $(i).stop().slideDown('fast');
                            }
                        }
                    }
                }
            });
        }
        var addRowColor = function(_id) {
            $("#" + _id + "-tbody tr:even").addClass(opts.evenRowClass);
            $("#" + _id + "-tbody tr:odd").addClass(opts.oddRowClass);
            $("#" + _id + "-tbody tr").hover(function() {
                $(this).addClass(opts.curRowClass);
            },
            function() {
                $(this).removeClass(opts.curRowClass);
            });
        }
        var syncTableWidth = function(id) {
            var ths = $("#" + id + "-thead tr:eq(0) > th");
            var len = ths.length;
            ths.each(function(i) {
                if (i < len - 1) {
                    var tarTh = $(this);
                    var srcTd = $("#" + id + "-tbody tr:eq(0) > td:eq(" + i + ")");
                    if (srcTd.length == 0) return;
                    var inW, outW, Width;
                    if (tarTh.attr("width")) {
                        inW = Math.ceil(tarTh.innerWidth());
                        outW = Math.ceil(tarTh.outerWidth());
                        Width = Math.ceil(tarTh.width());
                    } else {
                        inW = Math.ceil(srcTd.innerWidth());
                        outW = Math.ceil(srcTd.outerWidth());
                        Width = Math.ceil(srcTd.width());
                    }
                    srcTd.innerWidth(inW).outerWidth(outW).width(Width);
                    tarTh.innerWidth(inW).outerWidth(outW).width(Width);
                }
            });
        }
        var setOverflowHeight = function(id) {
            $("#" + id + "-qxtable-data").css({
                "max-height": opts.overflowHeight,
                "overflow": "auto"
            });
            if (opts.border) {
                $(`#${id}`).addClass('qx-table-border');
            }
        }
        return this.each(function() {
            var _this = $(this);
            var _this_id = _this[0].id;
            init(_this);
            addRowColor(_this_id);
            syncTableWidth(_this_id);
            setOverflowHeight(_this_id);
            addEvents(_this_id);
        });
        function addEvents(id) {
            var allcheck = $("#" + id + "-thead>tr input[type='checkbox'][name='AllChecks']");
            var checks = $("#" + id + "-tbody>tr input[type='checkbox'][name='Checks']");
            var len = checks.length;
            $(allcheck).click(function() {
                var data = [];
                var f = this.checked;
                var parent =$(this).parent();
                if (f) {
                    $(parent).removeClass('fuzzy').addClass('active');
                } else {
                    $(parent).removeClass('fuzzy').removeClass('active');
                }
                $(that).find("input[type='checkbox'][name='Checks']").each(function(i, item) {
                    var parent =$(item).parent();
                    var tr = $(parent).parents('tr');
                    if (f) {
                        $(parent).addClass('active');
                    } else {
                        $(parent).removeClass('active');
                    }
                    item.checked = f;
                    if (item.checked) {
                        data.push({
                            tr: tr,
                            id: $(item).val(),
                            data: datas[$(tr).index()]
                        });
                    }
                });
                // 监听checked
                opts.checked && opts.checked(data);
            });
            $(checks).click(function() {
                var num = 0;
                var data = [];
                var f = $(allcheck).is(':checked');
                if (f) {
                    $(allcheck).removeAttr('checked');
                }
                $(checks).each(function(i, item) {
                    var tr = $(this).parents('tr');
                    if (item.checked) {
                        $(this).parent().addClass('active');
                        num++;
                    } else {
                        $(this).parent().removeClass('active');
                    }
                    if (item.checked) {
                        data.push({
                            tr: tr,
                            id: $(item).val(),
                            data: datas[$(tr).index()]
                        });
                    }
                });
                var parent = $(allcheck).parent();
                if (num == len) {
                    $(allcheck).attr('checked', true);
                    $(parent).addClass('active').removeClass('fuzzy');
                } else if (num > 0 && num < len) {
                    $(allcheck).attr('checked', true);
                    $(parent).addClass('fuzzy').removeClass('active');
                } else {
                    $(allcheck).removeAttr('checked');
                    $(parent).removeClass('active').removeClass('fuzzy');
                }
                opts.checked && opts.checked(data);
            });
        }
    }
    // table collapseAll
    $.fn.collapseAll = function (option){
        var config = {};
        var opts = $.extend(config, option);
        $(this).find('td[data-cid]').each(function (){
            $(this).find('.icon-icondown').removeClass('active');
        });
        $(this).find('td[data-pid]').each(function (){
            $(this).slideUp('fast');
        });
    }
    // table expandAll
    $.fn.expandAll = function (option){
        var config = {};
        var opts = $.extend(config, option);
        $(this).find('td[data-cid]').each(function (){
            $(this).find('.icon-icondown').addClass('active');
        });
        $(this).find('td[data-pid]').each(function (){
            $(this).slideDown('fast');
        });
    }

    // collapse
    $.fn.collapse = function (option){
        var config = {};
        var opts = $.extend(config, option);
        $(this).on('click', '.panel-header', function (){
            $(this).siblings('.panel-collapse').slideDown('fast');
            $(this).parents('.panel').siblings().find('.panel-collapse').slideUp('fast');
        });
    }

    // close parents layer
    $.fn.closeLayer = function (option){
        var config = {};
        var opts = $.extend(config, option);
        var layer = $(".qx-layer",window.parent.document);
        $(layer).animate({'opacity': 0}).css({
            'transform': 'scale(.2)',
            'visibility': 'hidden'
        }).siblings('.mask').remove();
        if (opts.refresh) {
            parent.location.reload();
        }
    }
})(window.jQuery);

// render
;(function (){
    // collapse
    $('qx-collapse').each(function (index){
        $(this).wrapAll('<div class="qx-collapse" id="accordion"></div>').remove();
        var panel = '';
        $(this).find('qx-panel').each(function() {
            var iClass = $(this).attr('class');
            panel += `
                <div class="panel">
                    <div class="panel-header">
                        <h4 class="panel-title">${$(this).attr('label')}</h4>
                    </div>
                    <div class="panel-collapse ${iClass ? iClass : ''}">
                        <div class="panel-body">${$(this).html()}</div>
                    </div>
                </div>
            `;
        });
        $('.qx-collapse').eq(index).html(panel);
    });
    $('body').collapse();

    // cascader
    $('qx-cascader').each(function (){
        var place = $(this).attr('placeholder');
        $(this).wrapAll(`
        <div class="qx-cascader">
            <div class="qx-select qx-input">
                <input type="text" readonly autocomplete="off" placeholder="${place ? place : '请选择'}" class="qx-input_inner">
                <span class="qx-input_suffix">
                    <i class="qx-input_icon iconfont icon-arrowdown" style="transform: rotate(0deg);"></i>
                </span>
            </div>
        </div>`).remove();
    });

    // avatar
    $('qx-avatar').each(function (){
        var text = $(this).text();
        var src = $(this).attr('src');
        var alt = $(this).attr('alt');
        var fit = $(this).attr('fit');
        var icon = $(this).attr('icon');
        var size = $(this).attr('size');
        var shape = $(this).attr('shape');
        var isNumber = isNaN(size) ? false : true;
        $(this).wrapAll(`
            <span class="${!isNumber && size ? `qx-avatar-${size} ` : ''}${shape ? `qx-avatar-${shape} ` : ''}qx-avatar" ${isNumber ? `style="width: ${size}px; height: ${size}px; line-height: ${size}px"` : ''}>
                ${src ? `<img src="${src}" style="object-fit: ${fit ? fit : 'cover'};" ${alt ? `alt="${alt}"` : ''}>` : ''}
                ${!src && icon ? `<i class="iconfont ${icon}"></i>` : ''}
                ${!src && !icon && text ? `<span>${text}</span>` : ''}
            </span>
        `).remove();
    });

    // breadcrumb
    $('qx-breadcrumb').each(function (index){
        $(this).wrapAll('<div role="navigation" class="qx-breadcrumb"></div>').remove();
        var item = '';
        var icon = $(this).attr('icon');
        var separ = $(this).attr('separator');
        var breadItem = $(this).find('qx-breadcrumb-item');
        $(breadItem).each(function (index){
            var text = $(this).html();
            var last = index == $(breadItem).length - 1;
            item += `
                <span class="qx-breadcrumb_item">
                    <span class="qx-bread_inner">${text}</span>
                    ${icon && !last ? `<i class="qx-bread_separator iconfont ${icon}"></i>` : ''}
                    ${!icon && !last ? `<span class="qx-bread_separator">${separ ? separ : '/'}</span>` : ''}
                </span>
            `
        });
        $('.qx-breadcrumb').eq(index).html(item);
    });

    // Form
    $('qx-form').each(function (index){
        var method = $(this).attr('method');
        var action = $(this).attr('action');
        var target = $(this).attr('target');
        var enctype = $(this).attr('enctype');
        var charset = $(this).attr('accept-charset');
        $(this).wrapAll(`<form class="qx-form" onsubmit="return false" ${method ? `method=${method}` : ''} ${action ? `action=${action}` : ''} ${target ? `target=${target}` : ''} ${enctype ? `enctype=${enctype}` : ''} ${charset ? `charset=${charset}` : ''}></form>`);
        var width = $(this).attr('label-width');
        var formItem = '';
        $(this).find('qx-form-item').each(function (){
            var prop = $(this).attr('prop');
            var label = $(this).attr('label');
            formItem+=`
                <div class="qx-form-item" ${prop ? `prop=${prop}` : ''}>
                    ${label ? `<label class="qx-form_label" ${width ? `style="width: ${width}"` : ''}>${label}</label>` : ''}
                    <div class="qx-form_con">${$(this).html()}</div>
                </div>
            `;
        });
        $('.qx-form').eq(index).html(formItem);
    });

    // radio
    if ($('qx-radio').length > 0) {
        $('qx-radio').each(function (index) {
            var name = $(this).attr('name');
            var size = $(this).attr('size');
            var checked = $(this).attr('checked');
            var button = $(this).attr('button') != undefined ? true : false;
            var bordered = $(this).attr('bordered') != undefined ? true : false;
            $(this).wrapAll(`<label role="radio" class="${size ? size+' ' : ''}${bordered ? 'qx-radio-border ' : ''}${button ? 'qx-radio-button ' : ''}qx-radio" ${checked ? 'aria-checked="true"' : ''}>`);
            $('.qx-radio').eq(index).html(`
                <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-radio_input">
                    <span class="qx-radio_inner"></span>
                    <input type="radio" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${$(this).attr('value')}" class="qx-form_input" />
                </span>
                <span class="qx-form_label">${$(this).text()}</span>
            `);
        });
        $('body').radio();
    }

    // checkbox
    if ($('qx-checkbox-group').length <= 0) {
        g.checked.push([]);
        $('qx-checkbox').each(function (index) {
            var name = $(this).attr('name');
            var size = $(this).attr('size');
            var checked = $(this).attr('checked');
            var button = $(this).attr('button') != undefined ? true : false;
            var bordered = $(this).attr('bordered') != undefined ? true : false;
            $(this).wrapAll(`<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}></label>`);
            $('.qx-checkbox').eq(index).html(`
                <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                    <span class="qx-checkbox_inner"></span>
                    <input type="checkbox" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${$(this).attr('value')}" class="qx-form_input" />
                </span>
                <span class="qx-form_label">${$(this).text()}</span>
            `);
            if (checked) {
                g.checked[0].push({
                    id: `${index}`,
                    value: $('.qx-checkbox').eq(index).find('input').val()
                });
            }
        });
        $('body').checkbox();
    } else {
        // checkbox-group
        $('qx-checkbox-group').each(function (idx){
            $(this).wrapAll(`<div class="qx-checkbox-group" group-idx="${idx}"></div>`);
            g.checked.push([]);
            var checkbox = '';
            $(this).find('qx-checkbox').each(function (index){
                var name = $(this).attr('name');
                var size = $(this).attr('size');
                var value = $(this).attr('value');
                var checked = $(this).attr('checked');
                var button = $(this).attr('button') != undefined ? true : false;
                var bordered = $(this).attr('bordered') != undefined ? true : false;
                checkbox += `<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}>
                    <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                        <span class="qx-checkbox_inner"></span>
                        <input type="checkbox" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${value}" class="qx-form_input" />
                    </span>
                    <span class="qx-form_label">${$(this).text()}</span>
                </label>`;
                if (checked) {
                    g.checked[idx].push({
                        id: `${index}`,
                        value
                    });
                }
            });
            $('.qx-checkbox-group').eq(idx).html(checkbox);
        });
        $('body').checkbox();
    }

    // select
    if ($('qx-select').length > 0) {
        $('qx-select').each(function (index){
            var options = '';
            var value = '';
            var empty = '';
            var size = $(this).attr('size');
            var icon = $(this).attr('icon');
            var name = $(this).attr('name');
            var place = $(this).attr('placeholder');
            var disabled = $(this).attr('disabled');
            var iconGroup = $(this).attr('icon-group') != undefined ? true : false;
            var filterable = $(this).attr('filterable') != undefined ? true : false;
            var multiple = $(this).attr('multiple') != undefined ? true : false;
            $(this).wrapAll(`<div role="select" class="${multiple ? 'is-multiple ' : ''}${filterable ? 'is-filter ' : ''}${disabled ? 'is-disabled ' : ''}${iconGroup ? 'icon ' : ''}qx-select"></div>`)
            if ($(this).find('qx-option').length) {
                $(this).find('qx-option').each(function (){
                    var checked = $(this).attr('checked');
                    var itemVal = $(this).attr('value');
                    var itemLabel = $(this).attr('label');
                    if (checked) {
                        value = itemVal;
                    }
                    if (!iconGroup) {
                        options += `<li class="${checked ? 'active ' : ''}qx-select_item" data-val="${itemVal}">${itemLabel}<span class="hook iconfont icon-hook"></span></li>`;
                    }
                });
                empty = '';
            } else {
                empty = '暂无数据';
            }
            if (iconGroup) {
                var iconGroup = g.icon.split(',');
                for (let i = 0; i < iconGroup.length; i++) {
                    options += `<li class="qx-select_item" data-idx="${i}"><i class="iconfont icon-${iconGroup[i]}"></i></li>`;
                }
                empty = '';
            }
            var isIcon = iconGroup && icon;
            $('.qx-select').eq(index).html(`
                <div class="qx-input ${size ? `${size} qx-input_box` : ''}">
                    <input type="text" ${!filterable ? 'readonly' : ''} name="${name ? name : ''}" value="${isIcon ? ' ' : value}" autocomplete="off" ${place ? `placeholder="${place}"` : ''} ${isIcon ? `data-value='iconfont icon-${icon}'` : ''} class="qx-input_inner" />
                    ${isIcon ? `<i class="iconfont icon-${icon}"></i>` : ''}
                    <span class="qx-input_suffix">
                        <i class="qx-input_icon iconfont icon-arrowdown"></i>
                    </span>
                </div>
                <div class="qx-select-dropdown">
                    <div class="qx-scrollbar">
                        <div class="qx-scrollbar_wrap">
                            <ul class="qx-select_list">${options}</ul>
                            <div class="qx-select_empty" style="display: ${empty ? 'block' : ''}">${empty}</div>
                        </div>
                        <div class="qx-scrollbar_bar">
                            <div class="thumb"></div>
                        </div>
                    </div>
                </div>
            `);
        });
        $('body').select();
    }

    // switch
    setTimeout(() => {
        if ($('qx-switch').length > 0) {
            $('qx-switch').each(function (index){
                var name = $(this).attr('name');
                var checked = $(this).attr('checked');
                var disabled = $(this).attr('disabled');
                var activeText = $(this).attr('active-text');
                var inactiveText = $(this).attr('inactive-text');
                var activeValue = $(this).attr('active-value');
                var inactiveValue = $(this).attr('inactive-value');
                $(this).wrapAll(`<div role="switch" class="${checked ? 'is-checked ' : ''}${disabled ? 'is-disabled ' : ''}qx-switch"></div>`);
                $('.qx-switch').eq(index).html(`
                    <input type="checkbox" name="${name ? name : ''}" ${activeValue ? `true-value="${activeValue}"` : ''} ${inactiveValue ? `false-value="${inactiveValue}"` : ''} ${checked ? 'checked' : ''} class="qx-form_input" />
                    ${inactiveText ? `<span class="${!checked ? 'is-active ' : ''}qx-switch_label">${inactiveText}</span>` : ''}
                    <span class="qx-switch_core"></span>
                    ${activeText ? `<span class="${checked ? 'is-active ' : ''}qx-switch_label">${activeText}</span>` : ''}
                `);
            });
        }
        $('body').switch();
    }, 0);

    // button
    $('qx-button').each(function (){
        var text = $(this).text();
        var type = $(this).attr('type');
        var size = $(this).attr('size');
        var icon = $(this).attr('icon');
        var iClass = $(this).attr('class');
        var native = $(this).attr('native');
        var disabled = $(this).attr('disabled');
        var round = $(this).attr('round') != undefined ? 'round' : '';
        var upload = $(this).attr('upload') != undefined ? true : '';
        $(this).wrapAll(`<button type="${native ? native : 'button'}" class="${iClass ? iClass : ''} ${icon == 'icon-loading' ? 'is-loading ' : ''}${type ? type+' ' : ''}${round ? round+' ' : ''}${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}qx-button">
            ${upload ? `<input type="file" id="fileUp" multiple name="file" />` : ''}
            ${icon ? `<i class="iconfont ${icon}"></i>` : ''}${text ? `<span>${text}</span>` : ''}
        </button>`).remove();
    });

    // input
    if ($('qx-input').length > 0) {
        $('qx-input').each(function (){
            var type = $(this).attr('type');
            var rows = $(this).attr('rows');
            var cols = $(this).attr('cols');
            var size = $(this).attr('size');
            var name = $(this).attr('name');
            var value = $(this).attr('value');
            var resize = $(this).attr('resize');
            var disabled = $(this).attr('disabled');
            var readonly = $(this).attr('readonly');
            var required = $(this).attr('required');
            var autofocus = $(this).attr('autofocus');
            var maxlength = $(this).attr('maxlength');
            var minlength = $(this).attr('minlength');
            var placeholder = $(this).attr('placeholder');
            var autocomplete = $(this).attr('autocomplete');
            var showWord = $(this).attr('show-word') != undefined ? true : false;
            var showPass = $(this).attr('show-pass') != undefined ? true : false;
            var clearable = $(this).attr('clearable') != undefined ? true : false;
            if (type == 'textarea') {
                $(this).wrapAll(`
                    <div class="${disabled ? 'is-disabled' : ''}${showWord ? 'showWord ' : ''}qx-input qx-textarea">
                        <textarea 
                            class="qx-area_inner"
                            cols=${cols ? cols : 33}
                            rows=${rows ? rows : 3}
                            ${readonly ? readonly : ''}
                            ${disabled ? 'disabled' : ''}
                            ${autofocus ? autofocus : ''}
                            ${name ? `name=${name}` : ''}
                            ${required ? 'required' : ''}
                            ${maxlength ? `maxlength=${maxlength}` : ''}
                            ${minlength ? `maxlength=${minlength}` : ''}
                            ${placeholder ? `placeholder=${placeholder}` : ''}
                            ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                            ${resize ? `style="resize:${resize}"` : ''}>${value ? value : ''}</textarea>
                        ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 30}</span></span>` : ''}
                    </div>
                `).remove();
            } else {
                $(this).wrapAll(`
                    <div class="${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}${showWord ? 'showWord ' : ''}qx-input qx-input_box">
                        <input 
                            type="${type ? type : 'text'}"
                            ${readonly ? readonly : ''}
                            ${name ? `name=${name}` : ''}
                            ${autofocus ? autofocus : ''}
                            ${disabled ? 'disabled' : ''}
                            ${required ? 'required' : ''}
                            ${value ? `value=${value}` : ''}
                            ${maxlength ? `maxlength=${maxlength}` : ''}
                            ${minlength ? `maxlength=${minlength}` : ''}
                            ${placeholder ? `placeholder=${placeholder}` : ''}
                            ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                            class="${showPass || clearable ? 'suffix ' : ''}qx-input_inner" />
                        ${showPass ? `<span class="qx-input-suffix"><i class="iconfont icon-see"></i></span>` : ''}
                        ${clearable ? `<span class="qx-input-suffix"><i class="iconfont icon-closes"></i></span>` : ''}
                        ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 10}</span></span>` : ''}
                    </div>
                `).remove();
            }
        });
        $('body').input();
    }

    // time
    $('qx-time').each(function (){
        var name = $(this).attr('name');
        var value = $(this).attr('value');
        var place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input type="text" autocomplete="off" readonly ${name ? `name='${name}'` : ''} ${value ? `value='${value}'` : ''} placeholder='${place ? place : '请选择时间'}' class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // range
    $('qx-time-range').each(function (){
        var place = $(this).attr('placeholder');
        var value = $(this).attr('value');
        var name = $(this).attr('name');
        var p = place ? place.split(',') : [];
        var v = value ? value.split(',') : [];
        var n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始时间'}' ${n[0] ? `name='${n[0]}'` : ''} ${v[0] ? `value='${v[0]}'` : ''} class="c-datepicker-data-input only-time" />
                <span class="qx-datepicker-separator">-</span>
                <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束时间'}' ${n[1] ? `name='${n[1]}'` : ''}  ${v[1] ? `value='${v[1]}'` : ''} class="c-datepicker-data-input only-time" />
            </div>
        `).remove();
    });
    // date
    $('qx-date').each(function (){
        var name = $(this).attr('name');
        var value = $(this).attr('value');
        var place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" readonly ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期'}' class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // range
    $('qx-date-range').each(function (){
        var place = $(this).attr('placeholder');
        var value = $(this).attr('value');
        var name = $(this).attr('name');
        var p = place ? place.split(',') : [];
        var v = value ? value.split(',') : [];
        var n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始日期'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input only-date" />
              <span class="qx-datepicker-separator">-</span>
              <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束日期'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // datetime
    $('qx-datetime').each(function (){
        var name = $(this).attr('name');
        var value = $(this).attr('value');
        var place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" readonly ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期时间'}' class="c-datepicker-data-input"/>
            </div>
        `).remove();
    });
    // range
    $('qx-datetime-range').each(function (){
        var place = $(this).attr('placeholder');
        var value = $(this).attr('value');
        var name = $(this).attr('name');
        var p = place ? place.split(',') : [];
        var v = value ? value.split(',') : [];
        var n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始日期时间'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input only-date" />
                <span class="qx-datepicker-separator">-</span>
                <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束日期时间'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });

    // page 
    $('qx-pagination').each(function (){
        var bgColor = $(this).attr('background');
        var small = $(this).attr('small') != undefined ? true : false;
        $(this).wrapAll(`<div class="${small ? 'small ' : ''}pagination ${bgColor ? bgColor : ''}"></div>`).remove();
    });

    // tabs
    if ($('qx-tabs').length > 0) {
        $('qx-tabs').each(function (){
            var pane = '';
            var tabs = '';
            var type = $(this).attr('type');
            var closable = $(this).attr('closable') != undefined ? true : false;
            $(this).find('qx-tab-pane').each(function (index){
                pane += `<div class="${index == 0 ? 'active ' : ''}qx-tab-pane" data-idx="${index}">${$(this).html()}</div>`;
                tabs += `<div class="${index == 0 ? 'active ' : ''}qx-tabs_item" data-idx="${index}">${$(this).attr('value')} ${closable ? '<span class="iconfont icon-forks"></span>' : ''}</div>`;
            });
            $(this).wrapAll(`
                <div class="${type ? type+' ' : ''}${closable ? 'closable ' : ''}qx-tabs">
                    <div class="qx-tabs_head">
                        <div class="qx-tabs_nav">${tabs}</div>
                    </div>
                    <div class="qx-tabs_con">${pane}</div>
                </div>
            `).remove();
            g.paneLen = g.itemLen = $('.qx-tabs_item').length;
        });
        $('body').tabs();
    }

    // qx-top
    $('.qx-top .toggle').hover(function (){
        $(this).find('.nav-child').stop().fadeIn('fast').animate({
            top: '48px'
        }, 'fast');
        $(this).find('.icon-icondown').css('transform', 'rotate(180deg)');
    }, function (){
        $(this).find('.nav-child').fadeOut('fast').animate({
            top: '65px'
        });
        $(this).find('.icon-icondown').css('transform', 'rotate(0)');
    });
    // nav open
    $('.qx-top .left_open').on('click', function (){
        var page = $('#page-container');
        var navMenu = $('.qx-navmenu, #side-nav');
        var navText = $('.qx-navmenu .right');
        var subMenu = $('.qx-navmenu .sub-menu');
        var menuIcon = $(this).find('.icon-menu');
        if (t.hasClass(menuIcon, 'icon-menuopen')) {
            $(navText).show();
            $(page).css('left', '220px');
            $(navMenu).css('width', '220px');
            $(menuIcon).removeClass('icon-menuopen');
        } else {
            $(navText).hide();
            $(subMenu).hide();
            $(page).css('left', '60px');
            $(navMenu).css('width', '60px');
            $(menuIcon).addClass('icon-menuopen');
        }
    });

    // init nav
    g.selectedNav.map((i, index) => {
        if (index == g.selectedNav.length-1) {
            i.active = true;
        } else {
            i.active = false;
        }
        if (i.active) {
            for (let j of $('#side-nav .sub-menu span')) {
                if ($(j).text() == i.title) {
                    $(j).parent().addClass('active');
                    $(j).parents('li').find('.right i').addClass('icon-arrowdown');
                } else {
                    $(j).parent().removeClass('active');
                }
            }
        }
        if (index == g.selectedNav.length-1) {
            $('body').tabs({
                addItem: {
                    title: `${i.title}`,
                    pack: '#page-container',
                    content: `<iframe frameborder="0" src="${i.url}" scrolling="yes"></iframe>`
                }
            });
        } else {
            $('body').tabs({
                addItem: {
                    title: `${i.title}`,
                    pack: '#page-container',
                    content: `<iframe frameborder="0" data-src="${i.url}" scrolling="yes"></iframe>`
                }
            });
        }
    });
    // init tabs
    function initTabs(that) {
        var url = $(that).attr('data-href');
        var text = $(that).text();
        if (t.hasClass(that, 'active') && url != 'javascript:;' && url != 'javascript:void(0)') {
            $(that).tabs({
                addItem: {
                    title: `${text}`,
                    content: `<iframe frameborder="0" src="${url}" scrolling="yes"></iframe>`
                }
            });
            g.selectedNav = g.selectedNav.map((item, index) => {
                if (index == g.selectedNav.length-1) {
                    item.active = true;
                } else {
                    item.active = false;
                }
                return item;
            });
            t.setStorage('tagList', JSON.stringify(g.selectedNav));
        }
    }
    // qx-navmenu
    $('.qx-navmenu a').each(function (){
        if (t.hasClass(this, 'active')) {
            $(this).parents('.sub-menu').slideDown();
            $(this).siblings('.sub-menu').slideDown();
            if (t.getStorage('tagIndex') == 0) {
                g.selectedNav.push({
                    title: $(this).text().trim(),
                    url: $(this).attr('data-href'),
                    active: true
                });
                initTabs(this);
            }
            t.setStorage('tagIndex', -1);
        }
    });
    $('.qx-navmenu').on('click', 'a', function (){
        var nav = $(this).parents('#nav');
        var aLi = $(this).parents('li').siblings();
        var subMenu = $(this).siblings('.sub-menu');
        var arrow = $(this).find('.icon-arrowright');
        $('#page-container').css('left', '220px');
        $('.qx-navmenu, #side-nav').css('width', '220px');
        $('.qx-top .icon-menu').removeClass('icon-menuopen');
        $(nav).find('a').removeClass('active');
        $(aLi).find('.sub-menu').slideUp();
        $('.qx-navmenu .right').show();
        $(this).addClass('active');
        if ($(this).attr('href')) {
            $(aLi).find('i').removeClass('icon-arrowdown');
        }
        if ($(this).attr('href'), t.hasClass(this, 'active')) {
            if ($(subMenu).css('display') == 'none') {
                $(subMenu).slideDown();
                $(arrow).addClass('icon-arrowdown');
            } else {
                $(subMenu).stop().slideUp();
                $(arrow).removeClass('icon-arrowdown');
            }
        }
        var url = $(this).attr('data-href');
        if (url) {
            var title = $(this).text().trim();
            var tabItem = $('.qx-tabs .qx-tabs_item');
            var tabPane = $('.qx-tabs .qx-tab-pane');
            for (let i of g.selectedNav) {
                if (i.url == url && i.title == title) {
                    for (let j = 0; j < tabItem.length; j++) {
                        var current = $(tabItem).eq(j);
                        if ($(current).text().trim() == title) {
                            $(current).addClass('active').siblings().removeClass('active');
                            $(tabPane).eq(j).addClass('active').siblings().removeClass('active');
                        }
                    }
                    return;
                }
            }
            g.selectedNav.push({
                title, url
            });
            initTabs(this);
        }
    });
})(window);