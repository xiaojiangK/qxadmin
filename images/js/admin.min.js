/*!
 * qx-admin.js v1.0.0
 * (c) 2019 Qinxin-XiaojiangK
 * Released under the QiuXin License.
 */

// globalData
const g = {
    radioed: '',
    checked: [],
    selectd: [],
    datepicker: {
        "css": ['images/css/datepicker.min.css'],
        "js": ['images/js/datepicker.min.js']
    },
    itemLen: 0,
    paneLen: 0
};
// globalFn
const t = {
    // 模糊查询
    fuzzyQuery: function (list, keyWord) {
        var reg =  new RegExp(keyWord);
        var arr = [];
        for (var i = 0; i < list.length; i++) {
            if (reg.test(list[i])) {
                arr.push(list[i]);
            }
        }
        return arr.length > 0 ? true : false;
    },
    // 是否显示滚动条
    ifShowScroll: function (that) {
        const bar = $(that).find('.qx-scrollbar_bar');
        const wrap = $(that).find('.qx-scrollbar_wrap');
        const selectH = $(that).find('.qx-select_list').height();
        const scrollH = $(that).find('.qx-scrollbar').height();
        const scale = scrollH / selectH;
        if (selectH > scrollH) {
            $(bar).css({
                'top': 0,
                'display': 'block',
                'height': scale * scrollH
            });
            $(wrap).scrollTop(0);
        } else {
            $(bar).css('display', 'none');
        }
        // 判断滚动限制
        const barH = $(bar).height();
        $(wrap).scroll(function (){
            var top = $(this).scrollTop();
            if (top > scrollH - barH) {
                top = scrollH - barH;
            }
            $(this).siblings('.qx-scrollbar_bar').css('top', top);
        });
    },
    // hasClass
    hasClass: function (that, i) {
        return $(that).hasClass(i);
    }
};

;(function($){
    // radio
    $.fn.radio = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-radio', function (){
            const radio = $(this).find('.qx-radio_input');
            // 禁用状态
            if (t.hasClass(radio, 'is-disabled')) {
                return;
            }
            const input = $(this).find('input');
            $('.qx-radio input').removeAttr('checked');
            $(this).siblings().find('.qx-radio_input').removeClass('is-checked');
            $(this).attr('aria-checked', true).siblings().removeAttr('aria-checked');
            $(input).attr('checked', true);
            $(radio).addClass('is-checked');
            g.radioed = $(input).val();
            opts.change && opts.change($(input).val());
            return false;
        });
    }
    // checkbox
    $.fn.checkbox = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-checkbox', function (){
            const checkbox = $(this).find('.qx-checkbox_input');
            // 禁用状态
            if (t.hasClass(checkbox, 'is-disabled')) {
                return;
            }
            const groupIdx = $(this).parent().attr('group-idx');
            const checkIdx = $(checkbox).attr('data-idx');
            const input = $(this).find('input');
            const gIdx = groupIdx ? groupIdx : 0;
            if (t.hasClass(checkbox, 'is-checked')) {
                $(input).removeAttr('checked');
                $(this).removeAttr('aria-checked');
                $(checkbox).removeClass('is-checked');
                g.checked[gIdx] = g.checked[gIdx].filter(item => item.id != checkIdx);
            } else {
                $(input).attr('checked', true);
                $(this).attr('aria-checked', true);
                $(checkbox).addClass('is-checked');
                g.checked[gIdx].push({
                    id: checkIdx,
                    value: $(input).val()
                });
            }
            opts.change && opts.change(g.checked[gIdx]);
            return false;
        });
    }
    // select
    $.fn.select = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-select', function (e){
            const that = this;
            var e = e || window.event;
            // 禁用状态
            if (t.hasClass(this, 'is-disabled')) {
                return;
            }
            // 非多选隐藏
            if (!t.hasClass(this, 'is-multiple')) {
                $('.qx-select-dropdown').slideUp('fast');
            }
            // 恢复默认
            $(this).find('.qx-select_item').show();
            const arrow = $('.qx-select .icon-arrowdown');
            $(arrow).css('transform', 'rotate(0)');
            const input = $(this).find('.qx-input_inner');
            const dropdown = $(this).find('.qx-select-dropdown');
            // 可搜索
            if (t.hasClass(this, 'is-filter')) {
                $(input).on('input', function (){
                    var result = [];
                    const keyword = $(this).val();
                    const empty = $(that).find('.qx-select_empty');
                    const selectItem = $(that).find('.qx-select_item');
                    if (keyword == '') {
                        $(selectItem).show();
                        $(empty).hide().text('');
                        t.ifShowScroll(that);
                        return;
                    }
                    $(selectItem).each(function (){
                        const text = $(this).text();
                        if (t.fuzzyQuery(text.split(''), keyword) || text == keyword) {
                            $(this).show();
                            result.push(text);
                        } else {
                            $(this).hide();
                        }
                    });
                    // 是否有结果集
                    if (result.length == 0) {
                        t.ifShowScroll(that);
                        $(empty).show().text('无匹配数据');
                    } else {
                        t.ifShowScroll(that);
                        $(empty).hide().text('');
                    }
                    return;
                });
            }
            if ($(dropdown).css('display') == 'none') {
                $(dropdown).slideDown('fast');
                const iconarrow = $(this).find('.icon-arrowdown');
                $(iconarrow).css('transform', 'rotate(180deg)');
                t.ifShowScroll(this);
                $(document).on('click', function (){
                    $(dropdown).slideUp('fast');
                    $(iconarrow).css('transform', 'rotate(0)');
                });
            } else {
                if (e.target.nodeName != 'LI') {
                    $(dropdown).slideUp('fast');
                }
                $(arrow).css('transform', 'rotate(0)');
            }
            $(this).find('.qx-select_item').each(function (){
                $(this).off().on('click', function (){
                    // 可多选
                    if (t.hasClass(that, 'is-multiple')) {
                        const id = $(this).attr('data-idx');
                        if (t.hasClass(this, 'active')) {
                            $(this).removeClass('active');
                            g.selectd = g.selectd.filter(item => item.id != id);
                        } else {
                            $(this).addClass('active');
                            g.selectd.push({
                                id, value: $(this).text()
                            });
                        }
                        let value = '';
                        g.selectd.map((item, index) => {
                            if (index == g.selectd.length - 1) {
                                value += `${item.value}`;
                            } else {
                                value += `${item.value} / `;
                            }
                        });
                        $(input).val(value);
                        opts.change && opts.change(g.selectd);
                        return;
                    }
                    const value = $(this).text();
                    $(input).val(value);
                    $(this).addClass('active').siblings().removeClass('active');
                    opts.change && opts.change(value);
                });
            });
            return false;
        });
    }
    // switch
    $.fn.switch = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-switch', function (){
            if (t.hasClass(this, 'is-disabled')) {
                return;
            }
            let value = '';
            const input = $(this).find('input');
            const trueVal = $(input).attr('true-value');
            const falseVal = $(input).attr('false-value');
            if (t.hasClass(this, 'is-checked')) {
                value = falseVal ? falseVal : false;
                $(input).removeAttr('checked');
                $(this).removeClass('is-checked');
                $(this).find('.qx-switch_label').removeClass('is-active').eq(0).addClass('is-active');
            } else {
                value = trueVal ? trueVal : true;
                $(this).addClass('is-checked');
                $(input).attr('checked', true);
                $(this).find('.qx-switch_label').removeClass('is-active').eq(1).addClass('is-active');
            }
            opts.change && opts.change(value);
            return false;
        });
    }
    // input
    $.fn.input = function (option){
        var config = {
            change: null,
            blur: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.icon-closes', function (){
            $(this).parents('.qx-input_box').find('input').val('');
            return false;
        });
        $(this).on('click', '.icon-see', function (){
            const input =  $(this).parents('.qx-input_box').find('input');
            if ($(input).attr('type') == 'text') {
                $(input).attr('type', 'password');
            } else {
                $(input).attr('type', 'text');
            }
            return false;
        });
        $(this).on('input', '.qx-input_inner', function (){
            const parent = $(this).parents('.qx-input_box');
            if (t.hasClass(parent, 'showWord')) {
                $(parent).find('.num').text($(this).val().length);
            }
            opts.change && opts.change($(this).val());
            return false;
        });
        if (opts.blur) {
            $(this).on('blur', '.qx-input_inner', function (){
                opts.blur($(this).val());
            });
            $(this).on('blur', '.qx-area_inner', function (){
                opts.blur($(this).val());
            });
        }
        $(this).on('input', '.qx-area_inner', function (){
            const parent = $(this).parents('.qx-textarea');
            if (t.hasClass(parent, 'showWord')) {
                $(parent).find('.num').text($(this).val().length);
            }
            opts.change && opts.change($(this).val());
            return false;
        });
    }
    // DatePicker
    $.fn.DatePicker = function (option){
        var config = {
            min: false,
            max: false,
            format: 'YYYY-MM-DD HH:mm:ss',
            isRange: false,
            between: false,
            hasShortcut: false,
            shortcutOptions: [],
            hide: null
        };
        var val = [];
        var opts = $.extend(config, option);
        var input = $(this).find('input');
        $(this).find('.qx-datepicker-editor').datePicker({
            min: opts.min,
            max: opts.max,
            format: opts.format,
            isRange: opts.isRange,
            between: opts.between,
            hasShortcut: opts.hasShortcut,
            shortcutOptions: opts.shortcutOptions,
            hide: function (e){
                val = [];
                if (input.length == 1) {
                    val = $(input).val();
                } else {
                    for (let i of input) {
                        val.push($(i).val());
                    }
                }
                opts.hide && opts.hide(val, e);
            }
        });
    }
    // Page
    var zp = {
        init: function(obj, pageinit) {
            return (function() {
                obj.off();
                zp.addhtml(obj, pageinit);
                zp.bindEvent(obj, pageinit);
            } ());
        },
        addhtml: function(obj, pageinit) {
            if (pageinit.current > pageinit.pageNum) {
                pageinit.current = pageinit.pageNum;
            }
            return (function() {
                obj.empty();
                if (pageinit.current > 1) {
                    obj.append('<a href="javascript:;" class="prebtn">上一页</a>');
                } else {
                    obj.remove('.prevPage');
                    obj.append('<span class="disabled">上一页</span>');
                }
                if (pageinit.current > 4 && pageinit.pageNum > 4) {
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 1 + '</a>');
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 2 + '</a>');
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current > 4 && pageinit.current <= pageinit.pageNum - 5) {
                    var start = pageinit.current - 2,
                    end = pageinit.current + 2;
                } else if (pageinit.current > 4 && pageinit.current > pageinit.pageNum - 5) {
                    var start = pageinit.pageNum - 4,
                    end = pageinit.pageNum;
                } else {
                    var start = 1,
                    end = 9;
                }
                for (; start <= end; start++) {
                    if (start <= pageinit.pageNum && start >= 1) {
                        if (start == pageinit.current) {
                            obj.append('<span class="current">' + start + '</span>');
                        } else if (start == pageinit.current + 1) {
                            obj.append('<a href="javascript:;" class="zxfPagenum nextpage">' + start + '</a>');
                        } else {
                            obj.append('<a href="javascript:;" class="zxfPagenum">' + start + '</a>');
                        }
                    }
                }
                if (end < pageinit.pageNum) {
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current >= pageinit.pageNum) {
                    obj.remove('.nextbtn');
                    obj.append('<span class="disabled">下一页</span>');
                } else {
                    obj.append('<a href="javascript:;" class="nextbtn">下一页</a>');
                }
                obj.append('<span>' + '共' + '<b>' + pageinit.pageNum + '</b>' + '页，' + '</span>');
                obj.append('<span>' + '到第' + '<input type="number" class="zxfinput" value="'+ pageinit.current +'"/>' + '页' + '</span>');
            } ());
        },
        bindEvent: function(obj, pageinit) {
            return (function() {
                obj.on("click", "a.prebtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur - 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.zxfPagenum",
                function() {
                    var cur = Number.parseInt($(this).text());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.nextbtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur + 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on('blur', 'input.zxfinput', function (){
                    var cur = Number.parseInt($(this).val());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
            } ());
        }
    }
    $.fn.createPage = function(option) {
        var pageinit = $.extend({
            pageNum: 10,
            current: 1,
            backfun: function() {}
        }, option);
        zp.init($(this).find('.pagination'), pageinit);
    }

    // tabs
    $.fn.tabs = function (option){
        var config = {
            click: null,
            remove: null,
            addItem: null
        };
        var opts = $.extend(config, option);
        $(this).on('click', '.qx-tabs_item', function (){
            const index = $(this).attr('data-idx');
            const pane = $(this).parents('.qx-tabs').find('.qx-tab-pane');
            $(this).addClass('active').siblings().removeClass('active');
            $(pane).each(function (){
                if ($(this).attr('data-idx') == index) {
                    $(this).addClass('active').siblings().removeClass('active');
                }
            });
            opts.click && opts.click($(this).text());
        });
        $(this).on('click', '.icon-forks', function (){
            const pane = $(this).parents('.qx-tabs').find('.qx-tab-pane');
            const item = $(this).parent('.qx-tabs_item');
            const index = $(item).attr('data-idx');
            if (t.hasClass(item, 'active')) {
                const next = $(item).next('.qx-tabs_item');
                const prev = $(item).prev('.qx-tabs_item');
                if (next.length) {
                    next.addClass('active');
                    $(pane).each(function (){
                        if ($(this).attr('data-idx') == index) {
                            $(this).next().addClass('active');
                        }
                    });
                } else {
                    prev.addClass('active');
                    $(pane).each(function (){
                        if ($(this).attr('data-idx') == index) {
                            $(this).prev().addClass('active');
                        }
                    });
                }
            }
            $(item).remove();
            $(pane).each(function (){
                if ($(this).attr('data-idx') == index) {
                    $(this).remove();
                }
            });
            opts.remove && opts.remove($(item).text());
        });
        // addTab
        if (opts.addItem) {
            const pack = opts.addItem.pack ? opts.addItem.pack : 'body';
            const title = opts.addItem.title ? opts.addItem.title : 'New Tabs';
            const content = opts.addItem.content ? opts.addItem.content : 'New Tabs Content';
            const isClose = t.hasClass($(pack).find('.qx-tabs'), 'closable');
            $(pack).find('.qx-tabs_nav').append(`
                <div class="qx-tabs_item" data-idx="${g.itemLen++}">${title} ${isClose ? `<span class="iconfont icon-forks"></span>` : ''}</div>
            `);
            $(pack).find('.qx-tabs_con').append(`
                <div class="qx-tab-pane" data-idx="${g.paneLen++}">${content}</div>
            `);
        }
    }

    // message
    $.fn.message = function (option){
        var config = {
            msg: '这是一条消息提醒',
            type: 'info',
            duration: 2000,
            showClose: false
        };
        var opts = $.extend(config, option);
        const length = $('.qx-message').length;
        $('body').append(`
            <div role="alert" style="transform: translate3d(-50%, ${65 * length}px, 0)" class="qx-message qx-message-${opts.type} ${opts.showClose ? 'is-closable' : ''}">
                <i class="iconfont icon-${opts.type}"></i>
                <p class="qx-message_con">${opts.msg}</p>
                ${opts.showClose ? `<i class="iconfont icon-forks"></i>` : ''}
            </div>
        `);
        $('.qx-message').each(function (){
            $(this).find('.icon-forks').off().on('click', function (){
                $(this).parent('.qx-message').css({
                    opacity: 0,
                    transform: 'translate3d(-50%,-100%,0)'
                });
            });
            $(this).delay(opts.duration).animate({
                top: '-100%',
                opacity: 0
            }, 'slow', function (){
                $(this).remove();
            });
        });
    }

    // checkForm
    $.fn.validate = function (option){
        var config = {};
        var flag = true;
        var opts = $.extend(config, option);
        $(this).find('.qx-form-item').each(function (){
            var that = this;
            const prop = $(this).attr('prop');
            const qxInput = $(this).find('.qx-input');
            const content = $(this).find('.qx-form_con');
            const label = $(this).find('.qx-form_label');
            const date = $(this).find('.qx-datepicker-editor');
            for (let i in opts) {
                if (i == prop) {
                    const r = opts[i];
                    function checkInput(v, type='') {
                        $(that).find('.qx-form_error').remove();
                        if ((r.required&&!v) || v.length < r.min || v.length > r.max) {
                            $(qxInput).addClass('error');
                            $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                            flag = false;
                        } else {
                            $(qxInput).removeClass('error');
                        }
                        return false;
                    }
                    function checkBox(t) {
                        const idx = $(t).parent().attr('group-idx') || 0;
                        setTimeout(() => {
                            const len = g.checked[idx].length;
                            $(that).find('.qx-form_error').remove();
                            if ((r.required&&len == 0) || len > r.max || len < r.min) {
                                $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                                flag = false;
                            }
                        }, 0);
                        return false;
                    }
                    function checkRadio() {
                        $(that).find('.qx-form_error').remove();
                        setTimeout(() => {
                            if (r.required && !g.radioed) {
                                $(content).append(`<div class="qx-form_error">${r.message}</div>`);
                                flag = false;
                            }
                        }, 0);
                        return false;
                    }

                    // Submit Form
                    if (opts.type && opts.type == 'submit') {
                        $(this).find('.qx-input input').each(function (){
                            checkInput($(this).val(), 'submit');
                        });
                        $(this).find('textarea').each(function (){
                            checkInput($(this).val(), 'submit');
                        });
                        $(this).find('.qx-checkbox').each(function (){
                            checkBox(this);
                        });
                        $(this).find('.qx-radio').each(function (){
                            checkRadio()
                        });
                    }
                    // Reset Form
                    if (opts.type && opts.type == 'reset') {
                        $(date).removeClass('error');
                        $(qxInput).removeClass('error');
                        $(that).find('.qx-form_error').remove();
                    }

                    $(this).find('input, textarea').on('input', function (){
                        checkInput($(this).val());
                    });

                    $(this).find('.qx-checkbox').each(function (){
                        $(this).on('click', function (){
                            checkBox(this);
                        });
                    });

                    $(this).find('.qx-radio').each(function (){
                        $(this).on('click', function (){
                            checkRadio();
                        });
                    });
                    
                    $(this).find('.qx-select input').on('blur',function (){
                        setTimeout(() => {
                            checkInput($(this).val());
                        }, 120);
                    });
                    
                    $(this).find('.c-datepicker-data-input').on('blur',function (){
                        setTimeout(() => {
                            checkInput($(this).val());
                        }, 120);
                    });
                }
            };
        });
        setTimeout(() => {
            opts.valid && opts.valid(flag);
        }, 0)
    }

    // upload
    $.fn.upload = function (option){
        var config = {};
        var opts = $.extend(config, option);
        var formData = new FormData();
        var file = $(this)[0].files[0];
        formData.append("file", file);
        $.ajax({
            url: opts.url,
            type: "POST",
            data: formData,
            processData : false,
            contentType : false,
            dataType : 'json',
            async : false,
            complete: function (res){
                if (res.status == 200 && res.readyState == 4) {
                    opts.success && opts.success(res.responseText);
                } else {
                    opts.fail && opts.fail(res.responseText);
                }
            }
        });
    }

    // tooltip
    $.fn.tooltip = function (option){
        var config = {
            msg: '这是一条工具提示',
            duration: 2000,
            align: 'center'
        };
        var opts = $.extend(config, option);
        $('.qx-tooltip').remove();
        $('body').append(`<div role="tooltip" class="${opts.align ? opts.align : ''} qx-tooltip">${opts.msg}</div>`);
        $('.qx-tooltip').each(function (){
            $(this).delay(opts.duration).animate({ opacity: 0 }, function (){
                $(this).remove();
            });
        });
    }

    // table
    $.fn.table = function(options) {
        var defaults = {
            titles: [],
            data: [],
            border: '',
            evenRowClass: '',
            oddRowClass: '',
            curRowClass: 'qx-curRow',
            overflowHeight: "260px",
            checked: null
        }
        var that = this;
        var opts = $.extend(defaults, options);
        var titles = opts.titles;
        var datas = opts.data;
        var init = function(dom) {
            var id = dom[0].id;
            $("#" + id).empty();
            var arrH = [];
            arrH.push("<div id='" + id + "-qxable-head'>");
            arrH.push("<table class='qx-table'>");
            arrH.push("<thead id='" + id + "-thead'>");
            arrH.push("<tr>");
            $.each(titles,
            function(i, item) {
                var tdw = "";
                if (item.width) {
                    tdw = `width=${item.width}px`;
                }
                if (item.checkBox) {
                    arrH.push("<th " + tdw + "><span class='checkboxs'><input type='checkbox' name='AllChecks'/></span></th>");
                } else {
                    arrH.push("<th " + tdw + ">" + item.title + "</th>");
                }
            });
            arrH.push("</tr>");
            arrH.push("</thead>");
            arrH.push("</table>");
            arrH.push("</div>");
            dom.append(arrH.join(""));
            var arrB = [];
            arrB.push("<div id='" + id + "-qxable-data'>");
            arrB.push("<table class='qx-table'>");
            arrB.push("<tbody id='" + id + "-tbody'>");
            $.each(datas,
            function(i, item) {
                arrB.push("<tr>");
                $.each(titles,
                function(j, item2) {
                    var tdw = "";
                    if (item2.width) {
                        tdw = `width=${item2.width}px`;
                    } 
                    if (item2.checkBox) {
                        arrB.push(`<td ${tdw}><span class='checkboxs'><input type='checkbox' name='Checks' value='${item[item2.keyName]}'/></span></td"">`);
                    } else if (item2.switch) {
                        arrB.push(`<td ${tdw}><qx-switch ${item[item2.keyName] ? 'checked' : ''}></qx-switch></td>`);
                    } else {
                        arrB.push(`<td ${tdw}>${item[item2.keyName]}</td>`);
                    }
                });
                arrB.push("</tr>");
            });
            arrB.push("</tbody>");
            arrB.push("</table>");
            arrB.push("</div>");
            dom.append(arrB.join(""));
            if (opts.switch) {
                // 监听开关 return ID && status
                $(`#${id}`).on('click', '.qx-switch', function (){
                    var id = 0;
                    var checkId = $(this).parents('tr').find('input[name="Checks"]');
                    var textId = $(this).parents('tr').find('td').eq(0);
                    if ($(checkId).length) {
                        id = $(checkId).val();
                    } else {
                        id = $(textId).text();
                    }
                    setTimeout(() => {
                        opts.switch({id: id, status: t.hasClass(this, 'is-checked')});
                    },0);
                });
            }
        }
        var addRowColor = function(_id) {
            $("#" + _id + "-tbody tr:even").addClass(opts.evenRowClass);
            $("#" + _id + "-tbody tr:odd").addClass(opts.oddRowClass);
            $("#" + _id + "-tbody tr").hover(function() {
                $(this).addClass(opts.curRowClass);
            },
            function() {
                $(this).removeClass(opts.curRowClass);
            });
        }
        var syncTableWidth = function(id) {
            var ths = $("#" + id + "-thead tr:eq(0) > th");
            var len = ths.length;
            ths.each(function(i) {
                if (i < len - 1) {
                    var tarTh = $(this);
                    var srcTd = $("#" + id + "-tbody tr:eq(0) > td:eq(" + i + ")");
                    if (srcTd.length == 0) {
                        return;
                    }
                    var inW, outW, Width;
                    if (tarTh.attr("width")) {
                        inW = Math.ceil(tarTh.innerWidth());
                        outW = Math.ceil(tarTh.outerWidth());
                        Width = Math.ceil(tarTh.width());
                    } else {
                        inW = Math.ceil(srcTd.innerWidth());
                        outW = Math.ceil(srcTd.outerWidth());
                        Width = Math.ceil(srcTd.width());
                    }
                    srcTd.innerWidth(inW).outerWidth(outW).width(Width);
                    tarTh.innerWidth(inW).outerWidth(outW).width(Width);
                }
            });
        }
        var setOverflowHeight = function(id) {
            $("#" + id + "-qxable-data").css({
                "max-height": opts.overflowHeight,
                "overflow": "auto"
            });
            if (opts.border) {
                $(`#${id}`).addClass('qx-table-border');
            }
        }
        return this.each(function() {
            var _this = $(this);
            var _this_id = _this[0].id;
            init(_this);
            addRowColor(_this_id);
            syncTableWidth(_this_id);
            setOverflowHeight(_this_id);
            addEvents(_this_id);
        });
        function addEvents(id) {
            var allcheck = $("#" + id + "-thead>tr input[type='checkbox'][name='AllChecks']");
            var checks = $("#" + id + "-tbody>tr input[type='checkbox'][name='Checks']");
            var len = checks.length;
            $(allcheck).click(function() {
                var data = [];
                var f = this.checked;
                var parent =$(this).parent();
                if (f) {
                    $(parent).removeClass('fuzzy').addClass('active');
                } else {
                    $(parent).removeClass('fuzzy').removeClass('active');
                }
                $(that).find("input[type='checkbox'][name='Checks']").each(function(i, item) {
                    var parent =$(item).parent();
                    if (f) {
                        $(parent).addClass('active');
                    } else {
                        $(parent).removeClass('active');
                    }
                    item.checked = f;
                    if (item.checked) {
                        data.push({'id': $(item).val()});
                    }
                });
                // 监听checked return ID
                opts.checked && opts.checked(data);
            });
            $(checks).click(function() {
                var num = 0;
                var data = [];
                var f = $(allcheck).is(':checked');
                if (f) {
                    $(allcheck).removeAttr('checked');
                }
                $(checks).each(function(i, item) {
                    if (item.checked) {
                        $(this).parent().addClass('active');
                        num++;
                    } else {
                        $(this).parent().removeClass('active');
                    }
                    if (item.checked) {
                        data.push({'id': $(item).val()});
                    }
                });
                const parent = $(allcheck).parent();
                if (num == len) {
                    $(allcheck).attr('checked', true);
                    $(parent).addClass('active').removeClass('fuzzy');
                } else if (num > 0 && num < len) {
                    $(allcheck).attr('checked', true);
                    $(parent).addClass('fuzzy').removeClass('active');
                } else {
                    $(allcheck).removeAttr('checked');
                    $(parent).removeClass('active').removeClass('fuzzy');
                }
                opts.checked && opts.checked(data);
            });
        }
    }
})(window.jQuery);

// render
(function (){
    // Form
    $('qx-form').each(function (index){
        const method = $(this).attr('method');
        const action = $(this).attr('action');
        const target = $(this).attr('target');
        const enctype = $(this).attr('enctype');
        const charset = $(this).attr('accept-charset');
        $(this).wrapAll(`<form class="qx-form" ${method ? `method=${method}` : ''} ${action ? `action=${action}` : ''} ${target ? `target=${target}` : ''} ${enctype ? `enctype=${enctype}` : ''} ${charset ? `charset=${charset}` : ''}></form>`);
        const width = $(this).attr('label-width');
        var formItem = '';
        $(this).find('qx-form-item').each(function (){
            const prop = $(this).attr('prop');
            const label = $(this).attr('label');
            formItem+=`
                <div class="qx-form-item" ${prop ? `prop=${prop}` : ''}>
                    <label class="qx-form_label" ${width ? `style="width: ${width}"` : ''}>${label ? label : ''}</label>
                    <div class="qx-form_con">
                        ${$(this).html()}
                    </div>
                </div>
            `;
        });
        $('.qx-form').eq(index).html(formItem);
    });

    // radio
    if ($('qx-radio').length > 0) {
        $('qx-radio').each(function (index) {
            const name = $(this).attr('name');
            const size = $(this).attr('size');
            const checked = $(this).attr('checked');
            const button = $(this).attr('button') != undefined ? true : false;
            const bordered = $(this).attr('bordered') != undefined ? true : false;
            $(this).wrapAll(`<label role="radio" class="${size ? size+' ' : ''}${bordered ? 'qx-radio-border ' : ''}${button ? 'qx-radio-button ' : ''}qx-radio" ${checked ? 'aria-checked="true"' : ''}>`);
            $('.qx-radio').eq(index).html(`
                <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-radio_input">
                    <span class="qx-radio_inner"></span>
                    <input type="radio" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${$(this).attr('value')}" class="qx-form_input" />
                </span>
                <span class="qx-form_label">${$(this).text()}</span>
            `);
        });
        $('body').radio();
    }

    // checkbox
    if ($('qx-checkbox-group').length <= 0) {
        g.checked.push([]);
        $('qx-checkbox').each(function (index) {
            const name = $(this).attr('name');
            const size = $(this).attr('size');
            const checked = $(this).attr('checked');
            const button = $(this).attr('button') != undefined ? true : false;
            const bordered = $(this).attr('bordered') != undefined ? true : false;
            $(this).wrapAll(`<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}></label>`);
            $('.qx-checkbox').eq(index).html(`
                <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                    <span class="qx-checkbox_inner"></span>
                    <input type="checkbox" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${$(this).attr('value')}" class="qx-form_input" />
                </span>
                <span class="qx-form_label">${$(this).text()}</span>
            `);
            if (checked) {
                g.checked[0].push({
                    id: `${index}`,
                    value: $('.qx-checkbox').eq(index).find('input').val()
                });
            }
        });
        $('body').checkbox();
    } else {
        // checkbox-group
        $('qx-checkbox-group').each(function (idx){
            $(this).wrapAll(`<div class="qx-checkbox-group" group-idx="${idx}"></div>`);
            g.checked.push([]);
            var checkbox = '';
            $(this).find('qx-checkbox').each(function (index){
                const name = $(this).attr('name');
                const size = $(this).attr('size');
                const value = $(this).attr('value');
                const checked = $(this).attr('checked');
                const button = $(this).attr('button') != undefined ? true : false;
                const bordered = $(this).attr('bordered') != undefined ? true : false;
                checkbox += `<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}>
                    <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                        <span class="qx-checkbox_inner"></span>
                        <input type="checkbox" name="${name ? name : ''}" ${checked ? 'checked' : ''} value="${value}" class="qx-form_input" />
                    </span>
                    <span class="qx-form_label">${$(this).text()}</span>
                </label>`;
                if (checked) {
                    g.checked[idx].push({
                        id: `${index}`,
                        value
                    });
                }
            });
            $('.qx-checkbox-group').eq(idx).html(checkbox);
        });
        $('body').checkbox();
    }

    // select
    if ($('qx-select').length > 0) {
        $('qx-select').each(function (index){
            var options = '';
            var value = '';
            const name = $(this).attr('name');
            const disabled = $(this).attr('disabled');
            const filterable = $(this).attr('filterable') != undefined ? true : false;
            const multiple = $(this).attr('multiple') != undefined ? true : false;
            $(this).wrapAll(`<div role="select" class="${multiple ? 'is-multiple ' : ''}${filterable ? 'is-filter ' : ''}${disabled ? 'is-disabled ' : ''}qx-select"></div>`);
            $(this).find('qx-option').each(function (index){
                const checked = $(this).attr('checked');
                const itemVal = $(this).attr('value');
                if (checked) {
                    value = itemVal;
                }
                options += `<li class="${checked ? 'active ' : ''}qx-select_item" data-idx="${index}">${itemVal}<span class="iconfont icon-hook"></span></li>`
            });
            $('.qx-select').eq(index).html(`
                <div class="qx-input">
                    <input type="text" ${!filterable ? 'readonly' : ''} name="${name ? name : ''}" value="${value}" autocomplete="off" placeholder="${$(this).attr('placeholder')}" class="qx-input_inner" />
                    <span class="qx-input_suffix">
                        <i class="qx-input_icon iconfont icon-arrowdown"></i>
                    </span>
                </div>
                <div class="qx-select-dropdown">
                    <div class="qx-scrollbar">
                        <div class="qx-scrollbar_wrap">
                            <ul class="qx-select_list">
                                ${options}
                            </ul>
                            <div class="qx-select_empty"></div>
                        </div>
                        <div class="qx-scrollbar_bar">
                            <div class="thumb"></div>
                        </div>
                    </div>
                </div>
            `);
        });
        $('body').select();
    }

    // switch
    setTimeout(() => {
        if ($('qx-switch').length > 0) {
            $('qx-switch').each(function (index){
                const name = $(this).attr('name');
                const checked = $(this).attr('checked');
                const disabled = $(this).attr('disabled');
                const activeText = $(this).attr('active-text');
                const inactiveText = $(this).attr('inactive-text');
                const activeValue = $(this).attr('active-value');
                const inactiveValue = $(this).attr('inactive-value');
                $(this).wrapAll(`<div role="switch" class="${checked ? 'is-checked ' : ''}${disabled ? 'is-disabled ' : ''}qx-switch"></div>`);
                $('.qx-switch').eq(index).html(`
                    <input type="checkbox" name="${name ? name : ''}" ${activeValue ? `true-value="${activeValue}"` : ''} ${inactiveValue ? `false-value="${inactiveValue}"` : ''} ${checked ? 'checked' : ''} class="qx-form_input" />
                    ${inactiveText ? `<span class="${!checked ? 'is-active ' : ''}qx-switch_label">${inactiveText}</span>` : ''}
                    <span class="qx-switch_core"></span>
                    ${activeText ? `<span class="${checked ? 'is-active ' : ''}qx-switch_label">${activeText}</span>` : ''}
                `);
            });
            $('body').switch();
        }
    }, 0);

    // button
    $('qx-button').each(function (){
        const text = $(this).text();
        const type = $(this).attr('type');
        const size = $(this).attr('size');
        const icon = $(this).attr('icon');
        const native = $(this).attr('native');
        const disabled = $(this).attr('disabled');
        const round = $(this).attr('round') != undefined ? 'round' : '';
        const upload = $(this).attr('upload') != undefined ? true : '';
        $(this).wrapAll(`<button type="${native ? native : 'button'}" class="${icon == 'iconloading' ? 'is-loading ' : ''}${type ? type+' ' : ''}${round ? round+' ' : ''}${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}qx-button">
            ${upload ? `<input type="file" id="fileUp" multiple name="file" />` : ''}
            ${icon ? `<i class="iconfont ${icon}"></i>` : ''}${text ? `<span>${text}</span>` : ''}
        </button>`).remove();
    });

    // input
    if ($('qx-input').length > 0) {
        $('qx-input').each(function (){
            const type = $(this).attr('type');
            const rows = $(this).attr('rows');
            const cols = $(this).attr('cols');
            const size = $(this).attr('size');
            const name = $(this).attr('name');
            const value = $(this).attr('value');
            const resize = $(this).attr('resize');
            const disabled = $(this).attr('disabled');
            const readonly = $(this).attr('readonly');
            const required = $(this).attr('required');
            const autofocus = $(this).attr('autofocus');
            const maxlength = $(this).attr('maxlength');
            const minlength = $(this).attr('minlength');
            const placeholder = $(this).attr('placeholder');
            const autocomplete = $(this).attr('autocomplete');
            const showWord = $(this).attr('show-word') != undefined ? true : false;
            const showPass = $(this).attr('show-pass') != undefined ? true : false;
            const clearable = $(this).attr('clearable') != undefined ? true : false;
            if (type == 'textarea') {
                $(this).wrapAll(`
                    <div class="${disabled ? 'is-disabled' : ''}${showWord ? 'showWord ' : ''}qx-input qx-textarea">
                        <textarea 
                            class="qx-area_inner"
                            cols=${cols ? cols : 33}
                            rows=${rows ? rows : 3}
                            ${readonly ? readonly : ''}
                            ${disabled ? 'disabled' : ''}
                            ${autofocus ? autofocus : ''}
                            ${name ? `name=${name}` : ''}
                            ${required ? 'required' : ''}
                            ${maxlength ? `maxlength=${maxlength}` : ''}
                            ${minlength ? `maxlength=${minlength}` : ''}
                            ${placeholder ? `placeholder=${placeholder}` : ''}
                            ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                            ${resize ? `style="resize:${resize}"` : ''}>${value ? value : ''}</textarea>
                        ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 30}</span></span>` : ''}
                    </div>
                `).remove();
            } else {
                $(this).wrapAll(`
                    <div class="${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}${showWord ? 'showWord ' : ''}qx-input qx-input_box">
                        <input 
                            type="${type ? type : 'text'}"
                            ${readonly ? readonly : ''}
                            ${name ? `name=${name}` : ''}
                            ${autofocus ? autofocus : ''}
                            ${disabled ? 'disabled' : ''}
                            ${required ? 'required' : ''}
                            ${value ? `value=${value}` : ''}
                            ${maxlength ? `maxlength=${maxlength}` : ''}
                            ${minlength ? `maxlength=${minlength}` : ''}
                            ${placeholder ? `placeholder=${placeholder}` : ''}
                            ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                            class="${showPass || clearable ? 'suffix ' : ''}qx-input_inner" />
                        ${showPass ? `<span class="qx-input-suffix"><i class="iconfont icon-see"></i></span>` : ''}
                        ${clearable ? `<span class="qx-input-suffix"><i class="iconfont icon-closes"></i></span>` : ''}
                        ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 10}</span></span>` : ''}
                    </div>
                `).remove();
            }
        });
        $('body').input();
    }

    // time
    $('qx-time').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input type="text" autocomplete="off" readonly ${name ? `name='${name}'` : ''} ${value ? `value='${value}'` : ''} placeholder='${place ? place : '请选择时间'}' class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // range
    $('qx-time-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始时间'}' ${n[0] ? `name='${n[0]}'` : ''} ${v[0] ? `value='${v[0]}'` : ''} class="c-datepicker-data-input only-time" />
                <span class="qx-datepicker-separator">-</span>
                <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束时间'}' ${n[1] ? `name='${n[1]}'` : ''}  ${v[1] ? `value='${v[1]}'` : ''} class="c-datepicker-data-input only-time" />
            </div>
        `).remove();
    });
    // date
    $('qx-date').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" readonly ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期'}' class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // range
    $('qx-date-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始日期'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input only-date" />
              <span class="qx-datepicker-separator">-</span>
              <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束日期'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // datetime
    $('qx-datetime').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor qx-single-editor">
              <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" readonly ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期时间'}' class="c-datepicker-data-input"/>
            </div>
        `).remove();
    });
    // range
    $('qx-datetime-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="qx-input qx-datepicker-editor">
                <i class="qx-datepicker_icon kxiconfont icon-clock"></i>
                <input autocomplete="off" readonly placeholder='${p[0] ? p[0] : '开始日期时间'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input" />
                <span class="qx-datepicker-separator">-</span>
                <input autocomplete="off" readonly placeholder='${p[1] ? p[1] : '结束日期时间'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input" />
            </div>
        `).remove();
    });
    // lodaing datepicker
    if ($('.qx-datepicker-editor').length > 0) {
        for (let i of g.datepicker.css) {
            $('head').append(`<link rel="stylesheet" type="text/css" href="${i}" />`);
        }
        for (let i of g.datepicker.js) {
            $('body').append(`<script src="${i}"></script>`);
        }
    }

    // page 
    $('qx-pagination').each(function (){
        const bgColor = $(this).attr('background');
        const small = $(this).attr('small') != undefined ? true : false;
        $(this).wrapAll(`<div class="${small ? 'small ' : ''}pagination ${bgColor ? bgColor : ''}"></div>`).remove();
    });

    // tabs
    if ($('qx-tabs').length > 0) {
        $('qx-tabs').each(function (){
            let pane = '';
            let tabs = '';
            const type = $(this).attr('type');
            const closable = $(this).attr('closable') != undefined ? true : false;
            $(this).find('qx-tab-pane').each(function (index){
                pane += `<div class="${index == 0 ? 'active ' : ''}qx-tab-pane" data-idx="${index}">${$(this).text()}</div>`;
                tabs += `<div class="${index == 0 ? 'active ' : ''}qx-tabs_item" data-idx="${index}">${$(this).attr('value')} ${closable ? '<span class="iconfont icon-forks"></span>' : ''}</div>`;
            });
            $(this).wrapAll(`
                <div class="${type ? type+' ' : ''}${closable ? 'closable ' : ''}qx-tabs">
                    <div class="qx-tabs_head">
                        <div class="qx-tabs_nav">
                            ${tabs}
                        </div>
                    </div>
                    <div class="qx-tabs_con">
                        ${pane}
                    </div>
                </div>
            `).remove();
            g.paneLen = g.itemLen = $('.qx-tabs_item').length;
        });
        $('body').tabs();
    }

    // qx-top
    $('.qx-top .toggle').hover(function (){
        $(this).find('.nav-child').stop().fadeIn('fast').animate({
            top: '50px'
        });
        $(this).find('.icon-icondown').css('transform', 'rotate(180deg)');
    }, function (){
        $(this).find('.nav-child').fadeOut('fast').animate({
            top: '65px'
        });
        $(this).find('.icon-icondown').css('transform', 'rotate(0)');
    });
    $('.qx-top .left_open').on('click', function (){
        var leftNav = $('.qx-leftnav');
        var navText = $('.qx-leftnav .right');
        var menuIcon = $(this).find('.icon-menu');
        if (t.hasClass(menuIcon, 'icon-menuopen')) {
            $(navText).show();
            $(leftNav).css('height', '220px');
            $(menuIcon).removeClass('icon-menuopen');
        } else {
            $(navText).hide();
            $(leftNav).css('height', '60px');
            $(menuIcon).addClass('icon-menuopen');
        }
    });

    // qx-leftnav
    $('.qx-leftnav #nav li').each(function (){
        $(this).on('click', function (){
            console.log('this is leftnav!!');
        });
    });
})(window);