/*!
 * qx-admin.js v1.0.0
 * (c) 2019 Qinxin-XiaojiangK
 * Released under the QiuXin License.
 */

// globalData
const g = {
    checked: [],
    selectd: [],
    datepicker: {
        "css": ['images/css/datepicker.min.css'],
        "js": ['images/js/moment.min.js', 'images/js/datepicker.min.js']
    }
};
// globalFn
const t = {
    // 模糊查询
    fuzzyQuery: function (list, keyWord) {
        var reg =  new RegExp(keyWord);
        var arr = [];
        for (var i = 0; i < list.length; i++) {
            if (reg.test(list[i])) {
                arr.push(list[i]);
            }
        }
        return arr.length > 0 ? true : false;
    },
    // 是否显示滚动条
    ifShowScroll: function (that) {
        const bar = $(that).find('.qx-scrollbar_bar');
        const wrap = $(that).find('.qx-scrollbar_wrap');
        const selectH = $(that).find('.qx-select_list').height();
        const scrollH = $(that).find('.qx-scrollbar').height();
        const scale = scrollH / selectH;
        if (selectH > scrollH) {
            $(bar).css({
                'top': 0,
                'display': 'block',
                'height': scale * scrollH
            });
            $(wrap).scrollTop(0);
        } else {
            $(bar).css('display', 'none');
        }
        // 判断滚动限制
        const barH = $(bar).height();
        $(wrap).scroll(function (){
            var top = $(this).scrollTop();
            if (top > scrollH - barH) {
                top = scrollH - barH;
            }
            $(this).siblings('.qx-scrollbar_bar').css('top', top);
        });
    },
    // hasClass
    hasClass: function (that, i) {
        return $(that).hasClass(i);
    }
};

;(function($){
    // radio
    $.fn.radio = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-radio').each(function (){
            $(this).off().on('click', function (){
                const radio= $(this).find('.qx-radio_input');
                // 禁用状态
                if (t.hasClass(radio, 'is-disabled')) {
                    return;
                }
                $(this).siblings().find('.qx-radio_input').removeClass('is-checked');
                $(this).attr('aria-checked', true).siblings().removeAttr('aria-checked');
                $(radio).addClass('is-checked');
                if (opts.change) {
                    opts.change($(this).find('input').val());
                }
                return false;
            });
        });
    }
    // checkbox
    $.fn.checkbox = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-checkbox').each(function (){
            $(this).off().on('click', function (){
                const checkbox = $(this).find('.qx-checkbox_input');
                // 禁用状态
                if (t.hasClass(checkbox, 'is-disabled')) {
                    return;
                }
                const groupIdx = $(this).parent().attr('group-idx');
                const checkIdx = $(checkbox).attr('data-idx');
                const value = $(this).find('input').val();
                const gIdx = groupIdx ? groupIdx : 0;
                if (t.hasClass(checkbox, 'is-checked')) {
                    $(this).removeAttr('aria-checked');
                    $(checkbox).removeClass('is-checked');
                    g.checked[gIdx] = g.checked[gIdx].filter(item => item.id != checkIdx);
                } else {
                    $(this).attr('aria-checked', true);
                    $(checkbox).addClass('is-checked');
                    g.checked[gIdx].push({
                        id: checkIdx,
                        value
                    });
                }
                if (opts.change) {
                    opts.change(g.checked[gIdx]);
                }
                return false;
            });
        });
    }
    // select
    $.fn.select = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-select').each(function (){
            $(this).off().on('click', function (e){
                const that = this;
                var e = e || window.event;
                // 禁用状态
                if (t.hasClass(this, 'is-disabled')) {
                    return;
                }
                // 非多选隐藏
                if (!t.hasClass(this, 'is-multiple')) {
                    $('.qx-select-dropdown').slideUp('fast');
                }
                // 恢复默认
                $(this).find('.qx-select_item').show();
                const arrow = $('.qx-select .iconarrow');
                $(arrow).css('transform', 'rotate(0)');
                const input = $(this).find('.qx-input_inner');
                const dropdown = $(this).find('.qx-select-dropdown');
                // 可搜索
                if (t.hasClass(this, 'is-filter')) {
                    $(input).on('input', function (){
                        var result = [];
                        const keyword = $(this).val();
                        const empty = $(that).find('.qx-select_empty');
                        const selectItem = $(that).find('.qx-select_item');
                        if (keyword == '') {
                            $(selectItem).show();
                            $(empty).hide().text('');
                            t.ifShowScroll(that);
                            return;
                        }
                        $(selectItem).each(function (){
                            const text = $(this).text();
                            if (t.fuzzyQuery(text.split(''), keyword) || text == keyword) {
                                $(this).show();
                                result.push(text);
                            } else {
                                $(this).hide();
                            }
                        });
                        // 是否有结果集
                        if (result.length == 0) {
                            t.ifShowScroll(that);
                            $(empty).show().text('无匹配数据');
                        } else {
                            t.ifShowScroll(that);
                            $(empty).hide().text('');
                        }
                        return;
                    });
                }
                if ($(dropdown).css('display') == 'none') {
                    $(dropdown).slideDown('fast');
                    const iconarrow = $(this).find('.iconarrow');
                    $(iconarrow).css('transform', 'rotate(180deg)');
                    t.ifShowScroll(this);
                    $(document).on('click', function (){
                        $(dropdown).slideUp('fast');
                        $(iconarrow).css('transform', 'rotate(0)');
                    });
                } else {
                    if (e.target.nodeName != 'LI') {
                        $(dropdown).slideUp('fast');
                    }
                    $(arrow).css('transform', 'rotate(0)');
                }
                $(this).find('.qx-select_item').each(function (){
                    $(this).off().on('click', function (){
                        // 可多选
                        if (t.hasClass(that, 'is-multiple')) {
                            const id = $(this).attr('data-idx');
                            if (t.hasClass(this, 'active')) {
                                $(this).removeClass('active');
                                g.selectd = g.selectd.filter(item => item.id != id);
                            } else {
                                $(this).addClass('active');
                                g.selectd.push({
                                    id, value: $(this).text()
                                });
                            }
                            let value = '';
                            g.selectd.map((item, index) => {
                                if (index == g.selectd.length - 1) {
                                    value += `${item.value}`;
                                } else {
                                    value += `${item.value} / `;
                                }
                            });
                            $(input).val(value);
                            if (opts.change) {
                                opts.change(g.selectd);
                            }
                            return;
                        }
                        const value = $(this).text();
                        $(input).val(value);
                        $(this).addClass('active').siblings().removeClass('active');
                        if (opts.change) {
                            opts.change(value);
                        }
                    });
                });
                return false;
            });
        });
    }
    // switch
    $.fn.switch = function (option){
        var config = {
            change: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-switch').each(function (){
            $(this).off().on('click', function (){
                if (t.hasClass(this, 'is-disabled')) {
                    return;
                }
                let value = '';
                const trueVal = $(this).find('input').attr('true-value');
                const falseVal = $(this).find('input').attr('false-value');
                if (t.hasClass(this, 'is-checked')) {
                    value = falseVal ? falseVal : false;
                    $(this).removeClass('is-checked');
                    $(this).find('.qx-switch_label').removeClass('is-active').eq(0).addClass('is-active');
                } else {
                    value = trueVal ? trueVal : true;
                    $(this).addClass('is-checked');
                    $(this).find('.qx-switch_label').removeClass('is-active').eq(1).addClass('is-active');
                }
                if (opts.change) {
                    opts.change(value);
                }
            });
        });
    }
    // input
    $.fn.input = function (option){
        var config = {
            change: null,
            blur: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-input_box').each(function (){
            var that = this;
            var input = $(this).find('input');
            $(this).find('.iconclose-').off().on('click', function (){
                $(input).val('');
            });
            $(this).find('.iconsee').off().on('click', function (){
                if ($(input).attr('type') == 'text') {
                    $(input).attr('type', 'password');
                } else {
                    $(input).attr('type', 'text');
                }
            });
            $(input).on('input', function (){
                if (t.hasClass(that, 'showWord')) {
                    $(that).find('.num').text($(this).val().length);
                }
                if (opts.change) {
                    opts.change($(this).val());
                }
            });
            if (opts.blur) {
                $(input).on('blur', function (){
                    opts.blur($(this).val());
                });
            }
        });
        $(this).find('.qx-textarea').each(function (){
            var that = this;
            var textarea = $(this).find('textarea');
            $(textarea).on('input', function (){
                if (t.hasClass(that, 'showWord')) {
                    $(that).find('.num').text($(this).val().length);
                }
                if (opts.change) {
                    opts.change($(this).val());
                }
            });
            if (opts.blur) {
                $(textarea).on('blur', function (){
                    opts.blur($(this).val());
                });
            }
        });
    }
    // DatePicker
    $.fn.DatePicker = function (option){
        var config = {
            min: false,
            max: false,
            format: 'YYYY-MM-DD HH:mm:ss',
            isRange: false,
            between: false,
            hasShortcut: false,
            shortcutOptions: [],
            hide: null
        };
        var val = [];
        var opts = $.extend(config, option);
        var input = $(this).find('input');
        $(this).datePicker({
            min: opts.min,
            max: opts.max,
            format: opts.format,
            isRange: opts.isRange,
            between: opts.between,
            hasShortcut: opts.hasShortcut,
            shortcutOptions: opts.shortcutOptions,
            hide: function (e){
                val = [];
                if (input.length == 1) {
                    val = $(input).val();
                } else {
                    for (let i of input) {
                        val.push($(i).val());
                    }
                }
                opts.hide && opts.hide(val, e);
            }
        });
    }
    // Page
    var zp = {
        init: function(obj, pageinit) {
            return (function() {
                obj.off();
                zp.addhtml(obj, pageinit);
                zp.bindEvent(obj, pageinit);
            } ());
        },
        addhtml: function(obj, pageinit) {
            if (pageinit.current > pageinit.pageNum) {
                pageinit.current = pageinit.pageNum;
            }
            return (function() {
                obj.empty();
                if (pageinit.current > 1) {
                    obj.append('<a href="javascript:;" class="prebtn">上一页</a>');
                } else {
                    obj.remove('.prevPage');
                    obj.append('<span class="disabled">上一页</span>');
                }
                if (pageinit.current > 4 && pageinit.pageNum > 4) {
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 1 + '</a>');
                    obj.append('<a href="javascript:;" class="zxfPagenum">' + 2 + '</a>');
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current > 4 && pageinit.current <= pageinit.pageNum - 5) {
                    var start = pageinit.current - 2,
                    end = pageinit.current + 2;
                } else if (pageinit.current > 4 && pageinit.current > pageinit.pageNum - 5) {
                    var start = pageinit.pageNum - 4,
                    end = pageinit.pageNum;
                } else {
                    var start = 1,
                    end = 9;
                }
                for (; start <= end; start++) {
                    if (start <= pageinit.pageNum && start >= 1) {
                        if (start == pageinit.current) {
                            obj.append('<span class="current">' + start + '</span>');
                        } else if (start == pageinit.current + 1) {
                            obj.append('<a href="javascript:;" class="zxfPagenum nextpage">' + start + '</a>');
                        } else {
                            obj.append('<a href="javascript:;" class="zxfPagenum">' + start + '</a>');
                        }
                    }
                }
                if (end < pageinit.pageNum) {
                    obj.append('<span class="dot">...</span>');
                }
                if (pageinit.current >= pageinit.pageNum) {
                    obj.remove('.nextbtn');
                    obj.append('<span class="disabled">下一页</span>');
                } else {
                    obj.append('<a href="javascript:;" class="nextbtn">下一页</a>');
                }
                obj.append('<span>' + '共' + '<b>' + pageinit.pageNum + '</b>' + '页，' + '</span>');
                obj.append('<span>' + '到第' + '<input type="number" class="zxfinput" value="'+ pageinit.current +'"/>' + '页' + '</span>');
            } ());
        },
        bindEvent: function(obj, pageinit) {
            return (function() {
                obj.on("click", "a.prebtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur - 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.zxfPagenum",
                function() {
                    var cur = Number.parseInt($(this).text());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on("click", "a.nextbtn",
                function() {
                    var cur = Number.parseInt(obj.children("span.current").text());
                    var current = $.extend(pageinit, {
                        "current": cur + 1
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
                obj.on('blur', 'input.zxfinput', function (){
                    var cur = Number.parseInt($(this).val());
                    var current = $.extend(pageinit, {
                        "current": cur
                    });
                    zp.addhtml(obj, current);
                    if (typeof(pageinit.backfun) == "function") {
                        pageinit.backfun(current);
                    }
                });
            } ());
        }
    }
    $.fn.createPage = function(option) {
        var pageinit = $.extend({
            pageNum: 15,
            current: 1,
            backfun: function() {}
        }, option);
        zp.init($(this).find('.pagination'), pageinit);
    }

    // tabs
    $.fn.tabs = function (option){
        var config = {
            click: null,
            remove: null,
            addItem: null
        };
        var opts = $.extend(config, option);
        $(this).find('.qx-tabs').each(function (){
            var pane = $(this).find('.qx-tab-pane');
            $(this).off().on('click', function (e){
                pane = $(this).find('.qx-tab-pane');
                // 事件源
                const target = e.target || e.srcElement;
                const Ele = target.className.split(' ');
                for (let i of Ele) {
                    if (i == 'qx-tabs_item') {
                        if (opts.click) {
                            opts.click($(target).text());
                        }
                        const index = $(target).attr('data-idx');
                        $(target).addClass('active').siblings().removeClass('active');
                        $(pane).each(function (){
                            if ($(this).attr('data-idx') == index) {
                                $(this).addClass('active').siblings().removeClass('active');
                            }
                        });
                    }
                    if (i == 'iconclose') {
                        const parent = $(target).parent('.qx-tabs_item');
                        const index = $(parent).attr('data-idx');
                        if (opts.remove) {
                            opts.remove($(parent).text());
                        }
                        if (t.hasClass(parent, 'active')) {
                            const next = $(parent).next('.qx-tabs_item');
                            const prev = $(parent).prev('.qx-tabs_item');
                            if (next.length) {
                                next.addClass('active');
                                $(pane).each(function (){
                                    if ($(this).attr('data-idx') == index) {
                                        $(this).next().addClass('active');
                                    }
                                });
                            } else {
                                prev.addClass('active');
                                $(pane).each(function (){
                                    if ($(this).attr('data-idx') == index) {
                                        $(this).prev().addClass('active');
                                    }
                                });
                            }
                        }
                        
                        $(parent).remove();
                        $(pane).each(function (){
                            if ($(this).attr('data-idx') == index) {
                                $(this).remove();
                            }
                        });
                    }
                }
            });
        });
        // addTab
        if (opts.addItem) {
            const pack = opts.addItem.pack ? opts.addItem.pack : 'body';
            const title = opts.addItem.title ? opts.addItem.title : 'New Tabs';
            const content = opts.addItem.content ? opts.addItem.content : 'New Tabs Content';
            const isClose = t.hasClass($(pack).find('.qx-tabs'), 'closable');
            let itemLen = $(pack).find('.qx-tabs_item').length;
            let paneLen = $(pack).find('.qx-tab-pane').length;
            $(pack).find('.qx-tabs_nav').append(`
                <div class="qx-tabs_item" data-idx="${itemLen++}">${title} ${isClose ? `<span class="iconfont iconclose"></span>` : ''}</div>
            `);
            $(pack).find('.qx-tabs_con').append(`
                <div class="qx-tab-pane" data-idx="${paneLen++}">${content}</div>
            `);
        }
    }
})(window.jQuery);

// render
(function (){
    // radio
    $('qx-radio').each(function (index) {
        const name = $(this).attr('name');
        const size = $(this).attr('size');
        const checked = $(this).attr('checked');
        const button = $(this).attr('button') != undefined ? true : false;
        const bordered = $(this).attr('bordered') != undefined ? true : false;
        $(this).wrapAll(`<label role="radio" class="${size ? size+' ' : ''}${bordered ? 'qx-radio-border ' : ''}${button ? 'qx-radio-button ' : ''}qx-radio" ${checked ? 'aria-checked="true"' : ''}>`);
        $('.qx-radio').eq(index).html(`
            <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-radio_input">
                <span class="qx-radio_inner"></span>
                <input type="radio" name="${name ? name : ''}" value="${$(this).attr('value')}" class="qx-form_input" />
            </span>
            <span class="qx-form_label">${$(this).text()}</span>
        `);
    });
    $('body').radio();

    // checkbox
    if ($('qx-checkbox-group').length <= 0) {
        g.checked.push([]);
        $('qx-checkbox').each(function (index) {
            const name = $(this).attr('name');
            const size = $(this).attr('size');
            const checked = $(this).attr('checked');
            const button = $(this).attr('button') != undefined ? true : false;
            const bordered = $(this).attr('bordered') != undefined ? true : false;
            $(this).wrapAll(`<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}></label>`);
            $('.qx-checkbox').eq(index).html(`
                <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                    <span class="qx-checkbox_inner"></span>
                    <input type="checkbox" name="${name ? name : ''}" value="${$(this).attr('value')}" class="qx-form_input" />
                </span>
                <span class="qx-form_label">${$(this).text()}</span>
            `);
            if (checked) {
                g.checked[0].push({
                    id: `${index}`,
                    value: $('.qx-checkbox').eq(index).find('input').val()
                });
            }
        });
    } else {
        // checkbox-group
        $('qx-checkbox-group').each(function (idx){
            $(this).wrapAll(`<div class="qx-checkbox-group" group-idx="${idx}"></div>`);
            g.checked.push([]);
            var checkbox = '';
            $(this).find('qx-checkbox').each(function (index){
                const name = $(this).attr('name');
                const size = $(this).attr('size');
                const value = $(this).attr('value');
                const checked = $(this).attr('checked');
                const button = $(this).attr('button') != undefined ? true : false;
                const bordered = $(this).attr('bordered') != undefined ? true : false;
                checkbox += `<label role="checkbox" class="${size ? size+' ' : ''}${bordered ? 'qx-checkbox-border ' : ''}${button ? 'qx-checkbox-button ' : ''}qx-checkbox" ${checked ? 'aria-checked="true"' : ''}>
                    <span class="${checked ? 'is-checked ' : ''}${$(this).attr('disabled') ? 'is-disabled ' : ''}qx-checkbox_input" data-idx="${index}">
                        <span class="qx-checkbox_inner"></span>
                        <input type="checkbox" name="${name ? name : ''}" value="${value}" class="qx-form_input" />
                    </span>
                    <span class="qx-form_label">${$(this).text()}</span>
                </label>`;
                if (checked) {
                    g.checked[idx].push({
                        id: `${index}`,
                        value
                    });
                }
            });
            $('.qx-checkbox-group').eq(idx).html(checkbox);
        });
    }
    $('body').checkbox();

    // select
    $('qx-select').each(function (index){
        var options = '';
        var value = '';
        const name = $(this).attr('name');
        const disabled = $(this).attr('disabled');
        const filterable = $(this).attr('filterable') != undefined ? true : false;
        const multiple = $(this).attr('multiple') != undefined ? true : false;
        $(this).wrapAll(`<div role="select" class="${multiple ? 'is-multiple ' : ''}${filterable ? 'is-filter ' : ''}${disabled ? 'is-disabled ' : ''}qx-select"></div>`);
        $(this).find('qx-option').each(function (index){
            const checked = $(this).attr('checked');
            const itemVal = $(this).attr('value');
            if (checked) {
                value = itemVal;
            }
            options += `<li class="${checked ? 'active ' : ''}qx-select_item" data-idx="${index}">${itemVal}<span class="iconfont iconsuccess"></span></li>`
        });
        $('.qx-select').eq(index).html(`
            <div class="qx-input">
                <input type="text" ${!filterable ? 'readonly' : ''} name="${name ? name : ''}" value="${value}" autocomplete="off" placeholder="${$(this).attr('placeholder')}" class="qx-input_inner" />
                <span class="qx-input_suffix">
                    <i class="qx-input_icon iconfont iconarrow"></i>
                </span>
            </div>
            <div class="qx-select-dropdown">
                <div class="qx-scrollbar">
                    <div class="qx-scrollbar_wrap">
                        <ul class="qx-select_list">
                            ${options}
                        </ul>
                        <div class="qx-select_empty"></div>
                    </div>
                    <div class="qx-scrollbar_bar">
                        <div class="thumb"></div>
                    </div>
                </div>
            </div>
        `);
    });
    $('body').select();

    // switch
    $('qx-switch').each(function (index){
        const name = $(this).attr('name');
        const checked = $(this).attr('checked');
        const disabled = $(this).attr('disabled');
        const activeText = $(this).attr('active-text');
        const inactiveText = $(this).attr('inactive-text');
        const activeValue = $(this).attr('active-value');
        const inactiveValue = $(this).attr('inactive-value');
        $(this).wrapAll(`<div role="switch" class="${checked ? 'is-checked ' : ''}${disabled ? 'is-disabled ' : ''}qx-switch"></div>`);
        $('.qx-switch').eq(index).html(`
            <input type="checkbox" name="${name ? name : ''}" ${activeValue ? `true-value="${activeValue}"` : ''} ${inactiveValue ? `false-value="${inactiveValue}"` : ''} class="qx-form_input" />
            ${inactiveText ? `<span class="${!checked ? 'is-active ' : ''}qx-switch_label">${inactiveText}</span>` : ''}
            <span class="qx-switch_core"></span>
            ${activeText ? `<span class="${checked ? 'is-active ' : ''}qx-switch_label">${activeText}</span>` : ''}
        `);
    });
    $('body').switch();

    // button
    $('qx-button').each(function (){
        const text = $(this).text();
        const type = $(this).attr('type');
        const size = $(this).attr('size');
        const icon = $(this).attr('icon');
        const native = $(this).attr('native');
        const disabled = $(this).attr('disabled');
        const round = $(this).attr('round') != undefined ? 'round' : '';
        $(this).wrapAll(`<button type="${native ? native : 'button'}" class="${icon == 'iconloading' ? 'is-loading ' : ''}${type ? type+' ' : ''}${round ? round+' ' : ''}${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}qx-button">${icon ? `<i class="iconfont ${icon}"></i>` : ''}${text ? `<span>${text}</span>` : ''}</button>`).remove();
    });

    // input
    $('qx-input').each(function (){
        const type = $(this).attr('type');
        const rows = $(this).attr('rows');
        const cols = $(this).attr('cols');
        const size = $(this).attr('size');
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const resize = $(this).attr('resize');
        const disabled = $(this).attr('disabled');
        const readonly = $(this).attr('readonly');
        const autofocus = $(this).attr('autofocus');
        const maxlength = $(this).attr('maxlength');
        const minlength = $(this).attr('minlength');
        const placeholder = $(this).attr('placeholder');
        const autocomplete = $(this).attr('autocomplete');
        const showWord = $(this).attr('show-word') != undefined ? true : false;
        const showPass = $(this).attr('show-pass') != undefined ? true : false;
        const clearable = $(this).attr('clearable') != undefined ? true : false;
        if (type == 'textarea') {
            $(this).wrapAll(`
                <div class="${disabled ? 'is-disabled' : ''}${showWord ? 'showWord ' : ''}qx-textarea">
                    <textarea 
                        cols=${cols ? cols : 30}
                        rows=${rows ? rows : 3}
                        ${readonly ? readonly : ''}
                        ${disabled ? 'disabled' : ''}
                        ${autofocus ? autofocus : ''}
                        ${name ? `name=${name}` : ''}
                        ${value ? `value=${value}` : ''}
                        ${maxlength ? `maxlength=${maxlength}` : ''}
                        ${minlength ? `maxlength=${minlength}` : ''}
                        ${placeholder ? `placeholder=${placeholder}` : ''}
                        ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                        ${resize ? `style="resize:${resize}"` : ''}></textarea>
                    ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 30}</span></span>` : ''}
                </div>
            `).remove();
        } else {
            $(this).wrapAll(`
                <div class="${size ? size+' ' : ''}${disabled ? 'is-disabled ' : ''}${showWord ? 'showWord ' : ''}qx-input qx-input_box">
                    <input 
                        type="${type ? type : 'text'}"
                        ${readonly ? readonly : ''}
                        ${name ? `name=${name}` : ''}
                        ${autofocus ? autofocus : ''}
                        ${disabled ? 'disabled' : ''}
                        ${value ? `value=${value}` : ''}
                        ${maxlength ? `maxlength=${maxlength}` : ''}
                        ${minlength ? `maxlength=${minlength}` : ''}
                        ${placeholder ? `placeholder=${placeholder}` : ''}
                        ${autocomplete ? `autocomplete=${autocomplete}` : ''}
                        class="${showPass || clearable ? 'suffix ' : ''}qx-input_inner" />
                    ${showPass ? `<span class="qx-input-suffix"><i class="iconfont iconsee"></i></span>` : ''}
                    ${clearable ? `<span class="qx-input-suffix"><i class="iconfont iconclose-"></i></span>` : ''}
                    ${showWord && maxlength ? `<span class="qx-input-suffix"><span class="qx-input_count"><span class="num">${value ? value.length : 0}</span>/${maxlength ? maxlength : 10}</span></span>` : ''}
                </div>
            `).remove();
        }
    });

    // time
    $('qx-time').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor c-datepicker-single-editor">
                <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
                <input type="text" autocomplete="off" ${name ? `name='${name}'` : ''} ${value ? `value='${value}'` : ''} placeholder='${place ? place : '请选择时间'}' class="c-datepicker-data-input" />
            </div>
        `).remove();
    });
    // range
    $('qx-time-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor c-datepicker-single-editor">
                <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
                <input autocomplete="off" placeholder='${p[0] ? p[0] : '开始时间'}' ${n[0] ? `name='${n[0]}'` : ''} ${v[0] ? `value='${v[0]}'` : ''} class="c-datepicker-data-input only-time" />
                <span class="c-datepicker-range-separator">-</span>
                <input autocomplete="off" placeholder='${p[1] ? p[1] : '结束时间'}' ${n[1] ? `name='${n[1]}'` : ''}  ${v[1] ? `value='${v[1]}'` : ''} class="c-datepicker-data-input only-time" />
            </div>
        `).remove();
    });
    // date
    $('qx-date').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor c-datepicker-single-editor">
              <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期'}' class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // range
    $('qx-date-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor">
              <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
              <input autocomplete="off" placeholder='${p[0] ? p[0] : '开始日期'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input only-date" />
              <span class="c-datepicker-range-separator">-</span>
              <input autocomplete="off" placeholder='${p[1] ? p[1] : '结束日期'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input only-date" />
            </div>
        `).remove();
    });
    // datetime
    $('qx-datetime').each(function (){
        const name = $(this).attr('name');
        const value = $(this).attr('value');
        const place = $(this).attr('placeholder');
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor c-datepicker-single-editor">
              <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
              <input type="text" autocomplete="off" ${value ? `value='${value}'` : ''} ${name ? `name='${name}'` : ''} placeholder='${place ? place : '请选择日期时间'}' class="c-datepicker-data-input"/>
            </div>
        `).remove();
    });
    // range
    $('qx-datetime-range').each(function (){
        const place = $(this).attr('placeholder');
        const value = $(this).attr('value');
        const name = $(this).attr('name');
        const p = place ? place.split(',') : [];
        const v = value ? value.split(',') : [];
        const n = name ? name.split(',') : [];
        $(this).wrapAll(`
            <div class="c-datepicker-date-editor">
                <i class="c-datepicker-range__icon kxiconfont icon-clock"></i>
                <input autocomplete="off" placeholder='${p[0] ? p[0] : '开始日期时间'}' ${v[0] ? `value='${v[0]}'` : ''} ${n[0] ? `name='${n[0]}'` : ''} class="c-datepicker-data-input" />
                <span class="c-datepicker-range-separator">-</span>
                <input autocomplete="off" placeholder='${p[1] ? p[1] : '结束日期时间'}' ${v[1] ? `value='${v[1]}'` : ''} ${n[1] ? `name='${n[1]}'` : ''} class="c-datepicker-data-input" />
            </div>
        `).remove();
    });
    // lodaing datepicker
    if ($('.c-datepicker-date-editor').length > 0) {
        for (let i of g.datepicker.css) {
            $('head').append(`<link rel="stylesheet" type="text/css" href="${i}" />`);
        }
        for (let i of g.datepicker.js) {
            $('body').append(`<script src="${i}"></script>`);
        }
    }

    // page 
    $('qx-pagination').each(function (){
        const bgColor = $(this).attr('background');
        const small = $(this).attr('small') != undefined ? true : false;
        $(this).wrapAll(`<div class="${small ? 'small ' : ''}pagination ${bgColor ? bgColor : ''}"></div>`).remove();
    });

    // tabs
    $('qx-tabs').each(function (){
        let pane = '';
        let tabs = '';
        const type = $(this).attr('type');
        const closable = $(this).attr('closable') != undefined ? true : false;
        $(this).find('qx-tab-pane').each(function (index){
            pane += `<div class="${index == 0 ? 'active ' : ''}qx-tab-pane" data-idx="${index}">${$(this).text()}</div>`;
            tabs += `<div class="${index == 0 ? 'active ' : ''}qx-tabs_item" data-idx="${index}">${$(this).attr('value')} ${closable ? '<span class="iconfont iconclose"></span>' : ''}</div>`;
        });
        $(this).wrapAll(`
            <div class="${type ? type+' ' : ''}${closable ? 'closable ' : ''}qx-tabs">
                <div class="qx-tabs_head">
                    <div class="qx-tabs_nav">
                        ${tabs}
                    </div>
                </div>
                <div class="qx-tabs_con">
                    ${pane}
                </div>
            </div>
        `).remove();
    });
})(window);
    